openapi: 3.0.0
info:
  title: Personal Finance Dashboard API
  version: 1.0.0
  description: API for managing personal finance transactions and categories.
servers:
  - url: https://api.personalfinancedashboard.com/v1
    description: Production server
  - url: http://localhost:3000/api/v1
    description: Development server
security:
  - bearerAuth: []
paths:
  /transactions:
    get:
      summary: Retrieve user transactions
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          required: true
          description: Start date for filtering transactions (YYYY-MM-DD)
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          required: true
          description: End date for filtering transactions (YYYY-MM-DD)
        - in: query
          name: categoryId
          schema:
            type: string
          description: Optional category ID to filter transactions
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of transactions to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          description: Number of transactions to skip
      responses:
        '200':
          description: A list of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create a new transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionInput'
      responses:
        '201':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
  /transactions/{id}:
    put:
      summary: Update an existing transaction
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
          required: true
          description: ID of the transaction to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionUpdateInput'
      responses:
        '200':
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a transaction
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
          required: true
          description: ID of the transaction to delete
      responses:
        '204':
          description: Transaction deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
  /categories:
    get:
      summary: Retrieve user categories
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
  /dashboard/summary:
    get:
      summary: Retrieve aggregated spending data for dashboard charts
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          required: true
          description: Start date for summary (YYYY-MM-DD)
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          required: true
          description: End date for summary (YYYY-MM-DD)
        - in: query
          name: groupBy
          schema:
            type: string
            enum: [category, month, year]
          required: true
          description: How to group the data
      responses:
        '200':
          description: Aggregated data for charts
          content:
            application/json:
              schema:
                type: object
                properties:
                  labels:
                    type: array
                    items:
                      type: string
                  datasets:
                    type: array
                    items:
                      type: object
                      properties:
                        label:
                          type: string
                        data:
                          type: array
                          items:
                            type: number
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Transaction:
      type: object
      properties:
        id:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          readOnly: true
        userId:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          readOnly: true
        amount:
          type: number
          format: float
        type:
          type: string
          enum: [income, expense]
        date:
          type: string
          format: date
        description:
          type: string
          maxLength: 255
        categoryId:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
        categoryName:
          type: string
          readOnly: true
      required:
        - amount
        - type
        - date
        - categoryId
    TransactionInput:
      type: object
      properties:
        amount:
          type: number
          format: float
          minimum: 0.01
        type:
          type: string
          enum: [income, expense]
        date:
          type: string
          format: date
        description:
          type: string
          maxLength: 255
        categoryId:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
      required:
        - amount
        - type
        - date
        - categoryId
    TransactionUpdateInput:
      type: object
      properties:
        amount:
          type: number
          format: float
          minimum: 0.01
        type:
          type: string
          enum: [income, expense]
        date:
          type: string
          format: date
        description:
          type: string
          maxLength: 255
        categoryId:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
    Category:
      type: object
      properties:
        id:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          readOnly: true
        userId:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          readOnly: true
        name:
          type: string
          maxLength: 100
        type:
          type: string
          enum: [income, expense]
      required:
        - name
        - type
    CategoryInput:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        type:
          type: string
          enum: [income, expense]
      required:
        - name
        - type
  responses:
    UnauthorizedError:
      description: Authentication required or invalid token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequestError:
      description: Invalid request payload or parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
