/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp%2Fcomponents%2FProviders.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp%2Fcomponents%2FServiceWorkerRegistration.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp%2Fcomponents%2FProviders.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp%2Fcomponents%2FServiceWorkerRegistration.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/components/Providers.tsx */ \"(app-pages-browser)/./src/app/components/Providers.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/components/ServiceWorkerRegistration.tsx */ \"(app-pages-browser)/./src/app/components/ServiceWorkerRegistration.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/globals.css */ \"(app-pages-browser)/./src/app/globals.css\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZhc2ltc2luYW55dWtzZWwlMkZEZXNrdG9wJTJGTW9vZFRyYWNrZXIlMkZzcmMlMkZhcHAlMkZjb21wb25lbnRzJTJGUHJvdmlkZXJzLnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiUyMmRlZmF1bHQlMjIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZhc2ltc2luYW55dWtzZWwlMkZEZXNrdG9wJTJGTW9vZFRyYWNrZXIlMkZzcmMlMkZhcHAlMkZjb21wb25lbnRzJTJGU2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlMjJkZWZhdWx0JTIyJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGYXNpbXNpbmFueXVrc2VsJTJGRGVza3RvcCUyRk1vb2RUcmFja2VyJTJGc3JjJTJGYXBwJTJGZ2xvYmFscy5jc3MlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0Qmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSw4TEFBNkk7QUFDN0k7QUFDQSw4TkFBNko7QUFDN0o7QUFDQSxvS0FBbUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz9jNjc2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiLCB3ZWJwYWNrRXhwb3J0czogW1wiZGVmYXVsdFwiXSAqLyBcIi9Vc2Vycy9hc2ltc2luYW55dWtzZWwvRGVza3RvcC9Nb29kVHJhY2tlci9zcmMvYXBwL2NvbXBvbmVudHMvUHJvdmlkZXJzLnRzeFwiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiLCB3ZWJwYWNrRXhwb3J0czogW1wiZGVmYXVsdFwiXSAqLyBcIi9Vc2Vycy9hc2ltc2luYW55dWtzZWwvRGVza3RvcC9Nb29kVHJhY2tlci9zcmMvYXBwL2NvbXBvbmVudHMvU2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi50c3hcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9hc2ltc2luYW55dWtzZWwvRGVza3RvcC9Nb29kVHJhY2tlci9zcmMvYXBwL2dsb2JhbHMuY3NzXCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp%2Fcomponents%2FProviders.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp%2Fcomponents%2FServiceWorkerRegistration.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/process.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = __webpack_require__.g.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = __webpack_require__.g.process) == null ? void 0 : _global_process1.env) === \"object\" ? __webpack_require__.g.process : __webpack_require__(/*! next/dist/compiled/process */ \"(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js\");\n\n//# sourceMappingURL=process.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLHFDQUFxQyxxQkFBTSxpRkFBaUYscUJBQU0sa0VBQWtFLHFCQUFNLFdBQVcsbUJBQU8sQ0FBQyw0R0FBNEI7O0FBRXpQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanM/NDZjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfZ2xvYmFsX3Byb2Nlc3MsIF9nbG9iYWxfcHJvY2VzczE7XG5tb2R1bGUuZXhwb3J0cyA9ICgoX2dsb2JhbF9wcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsX3Byb2Nlc3MuZW52KSAmJiB0eXBlb2YgKChfZ2xvYmFsX3Byb2Nlc3MxID0gZ2xvYmFsLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsX3Byb2Nlc3MxLmVudikgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwucHJvY2VzcyA6IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzc1wiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvY2Vzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/compiled/process/browser.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzcy9icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxZQUFZLE9BQU8sZ0JBQWdCLG1CQUFtQixNQUFNLE1BQU0sNEJBQTRCLG1EQUFtRCwrQkFBK0IscURBQXFELFlBQVksSUFBSSxtQ0FBbUMsYUFBYSxLQUFLLG9CQUFvQixTQUFTLG1CQUFtQixJQUFJLHFDQUFxQyxlQUFlLEtBQUssdUJBQXVCLFNBQVMsdUJBQXVCLElBQUksdUJBQXVCLG1CQUFtQix1QkFBdUIsMkNBQTJDLGFBQWEsdUJBQXVCLElBQUksY0FBYyxTQUFTLElBQUksd0JBQXdCLFNBQVMsMEJBQTBCLDRCQUE0QixxQkFBcUIsdUJBQXVCLGdEQUFnRCxlQUFlLHVCQUF1QixJQUFJLFlBQVksU0FBUyxJQUFJLHNCQUFzQixTQUFTLHdCQUF3QixTQUFTLFlBQVksTUFBTSxTQUFTLDJCQUEyQixXQUFXLE9BQU8sUUFBUSxhQUFhLGNBQWMsS0FBSyxLQUFLLGFBQWEsY0FBYyxzQkFBc0IsTUFBTSxPQUFPLGtDQUFrQyxPQUFPLGVBQWUsU0FBUyxJQUFJLEtBQUssYUFBYSxNQUFNLFlBQVksS0FBSyxXQUFXLE9BQU8sUUFBUSxtQkFBbUIsdUJBQXVCLG9DQUFvQyx1QkFBdUIsWUFBWSxtQkFBbUIsS0FBSyxxQkFBcUIsc0JBQXNCLHFCQUFxQix5QkFBeUIsbUJBQW1CLFdBQVcsYUFBYSw4QkFBOEIsaUNBQWlDLGtCQUFrQixlQUFlLFNBQVMsVUFBVSxhQUFhLGNBQWMsaUJBQWlCLFVBQVUsbUJBQW1CLFlBQVksV0FBVyxzQkFBc0IsMEJBQTBCLFlBQVksdUJBQXVCLDJCQUEyQix3QkFBd0IsVUFBVSxzQkFBc0IscURBQXFELGlCQUFpQixXQUFXLG9CQUFvQixtREFBbUQsbUJBQW1CLFlBQVksU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssK0JBQStCLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3Byb2Nlc3MvYnJvd3Nlci5qcz9mYzhiIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe3ZhciBlPXsyMjk6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5leHBvcnRzPXt9O3ZhciByO3ZhciBuO2Z1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9KGZ1bmN0aW9uKCl7dHJ5e2lmKHR5cGVvZiBzZXRUaW1lb3V0PT09XCJmdW5jdGlvblwiKXtyPXNldFRpbWVvdXR9ZWxzZXtyPWRlZmF1bHRTZXRUaW1vdXR9fWNhdGNoKGUpe3I9ZGVmYXVsdFNldFRpbW91dH10cnl7aWYodHlwZW9mIGNsZWFyVGltZW91dD09PVwiZnVuY3Rpb25cIil7bj1jbGVhclRpbWVvdXR9ZWxzZXtuPWRlZmF1bHRDbGVhclRpbWVvdXR9fWNhdGNoKGUpe249ZGVmYXVsdENsZWFyVGltZW91dH19KSgpO2Z1bmN0aW9uIHJ1blRpbWVvdXQoZSl7aWYocj09PXNldFRpbWVvdXQpe3JldHVybiBzZXRUaW1lb3V0KGUsMCl9aWYoKHI9PT1kZWZhdWx0U2V0VGltb3V0fHwhcikmJnNldFRpbWVvdXQpe3I9c2V0VGltZW91dDtyZXR1cm4gc2V0VGltZW91dChlLDApfXRyeXtyZXR1cm4gcihlLDApfWNhdGNoKHQpe3RyeXtyZXR1cm4gci5jYWxsKG51bGwsZSwwKX1jYXRjaCh0KXtyZXR1cm4gci5jYWxsKHRoaXMsZSwwKX19fWZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChlKXtpZihuPT09Y2xlYXJUaW1lb3V0KXtyZXR1cm4gY2xlYXJUaW1lb3V0KGUpfWlmKChuPT09ZGVmYXVsdENsZWFyVGltZW91dHx8IW4pJiZjbGVhclRpbWVvdXQpe249Y2xlYXJUaW1lb3V0O3JldHVybiBjbGVhclRpbWVvdXQoZSl9dHJ5e3JldHVybiBuKGUpfWNhdGNoKHQpe3RyeXtyZXR1cm4gbi5jYWxsKG51bGwsZSl9Y2F0Y2godCl7cmV0dXJuIG4uY2FsbCh0aGlzLGUpfX19dmFyIGk9W107dmFyIG89ZmFsc2U7dmFyIHU7dmFyIGE9LTE7ZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCl7aWYoIW98fCF1KXtyZXR1cm59bz1mYWxzZTtpZih1Lmxlbmd0aCl7aT11LmNvbmNhdChpKX1lbHNle2E9LTF9aWYoaS5sZW5ndGgpe2RyYWluUXVldWUoKX19ZnVuY3Rpb24gZHJhaW5RdWV1ZSgpe2lmKG8pe3JldHVybn12YXIgZT1ydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7bz10cnVlO3ZhciB0PWkubGVuZ3RoO3doaWxlKHQpe3U9aTtpPVtdO3doaWxlKCsrYTx0KXtpZih1KXt1W2FdLnJ1bigpfX1hPS0xO3Q9aS5sZW5ndGh9dT1udWxsO289ZmFsc2U7cnVuQ2xlYXJUaW1lb3V0KGUpfXQubmV4dFRpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKXtmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXt0W3ItMV09YXJndW1lbnRzW3JdfX1pLnB1c2gobmV3IEl0ZW0oZSx0KSk7aWYoaS5sZW5ndGg9PT0xJiYhbyl7cnVuVGltZW91dChkcmFpblF1ZXVlKX19O2Z1bmN0aW9uIEl0ZW0oZSx0KXt0aGlzLmZ1bj1lO3RoaXMuYXJyYXk9dH1JdGVtLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfTt0LnRpdGxlPVwiYnJvd3NlclwiO3QuYnJvd3Nlcj10cnVlO3QuZW52PXt9O3QuYXJndj1bXTt0LnZlcnNpb249XCJcIjt0LnZlcnNpb25zPXt9O2Z1bmN0aW9uIG5vb3AoKXt9dC5vbj1ub29wO3QuYWRkTGlzdGVuZXI9bm9vcDt0Lm9uY2U9bm9vcDt0Lm9mZj1ub29wO3QucmVtb3ZlTGlzdGVuZXI9bm9vcDt0LnJlbW92ZUFsbExpc3RlbmVycz1ub29wO3QuZW1pdD1ub29wO3QucHJlcGVuZExpc3RlbmVyPW5vb3A7dC5wcmVwZW5kT25jZUxpc3RlbmVyPW5vb3A7dC5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuW119O3QuYmluZGluZz1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX07dC5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn07dC5jaGRpcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3QudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19fTt2YXIgdD17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKHIpe3ZhciBuPXRbcl07aWYobiE9PXVuZGVmaW5lZCl7cmV0dXJuIG4uZXhwb3J0c312YXIgaT10W3JdPXtleHBvcnRzOnt9fTt2YXIgbz10cnVlO3RyeXtlW3JdKGksaS5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO289ZmFsc2V9ZmluYWxseXtpZihvKWRlbGV0ZSB0W3JdfXJldHVybiBpLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciByPV9fbmNjd3Bja19yZXF1aXJlX18oMjI5KTttb2R1bGUuZXhwb3J0cz1yfSkoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"a7c0918c5b5b\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvZ2xvYmFscy5jc3M/Y2RjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImE3YzA5MThjNWI1YlwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/components/Providers.tsx":
/*!******************************************!*\
  !*** ./src/app/components/Providers.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Providers; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _app_contexts_MoodApiContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/app/contexts/MoodApiContext */ \"(app-pages-browser)/./src/app/contexts/MoodApiContext.tsx\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/**\n * App Providers Component\n * \n * Wraps the app with necessary providers for client-side functionality.\n * \n * @fileoverview Providers wrapper component\n * @author Mental Health Journal App\n * @version 1.0.0\n */ /* __next_internal_client_entry_do_not_use__ default auto */ \n\nfunction Providers(param) {\n    let { children } = param;\n    // API client configuration\n    const apiConfig = {\n        baseURL: process.env.NEXT_PUBLIC_API_URL || \"http://localhost:3000\",\n        timeout: 30000,\n        retries: 3,\n        retryDelay: 1000,\n        enableCaching: true,\n        cacheTimeout: 300000\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_app_contexts_MoodApiContext__WEBPACK_IMPORTED_MODULE_1__.MoodApiProvider, {\n        config: apiConfig,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/asimsinanyuksel/Desktop/MoodTracker/src/app/components/Providers.tsx\",\n        lineNumber: 32,\n        columnNumber: 5\n    }, this);\n}\n_c = Providers;\nvar _c;\n$RefreshReg$(_c, \"Providers\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvY29tcG9uZW50cy9Qcm92aWRlcnMudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Q0FRQztBQUsrRDtBQU1qRCxTQUFTQyxVQUFVLEtBQTRCO1FBQTVCLEVBQUVDLFFBQVEsRUFBa0IsR0FBNUI7SUFDaEMsMkJBQTJCO0lBQzNCLE1BQU1DLFlBQVk7UUFDaEJDLFNBQVNDLE9BQU9BLENBQUNDLEdBQUcsQ0FBQ0MsbUJBQW1CLElBQUk7UUFDNUNDLFNBQVM7UUFDVEMsU0FBUztRQUNUQyxZQUFZO1FBQ1pDLGVBQWU7UUFDZkMsY0FBYztJQUNoQjtJQUVBLHFCQUNFLDhEQUFDWix5RUFBZUE7UUFBQ2EsUUFBUVY7a0JBQ3RCRDs7Ozs7O0FBR1A7S0FoQndCRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvYXBwL2NvbXBvbmVudHMvUHJvdmlkZXJzLnRzeD9iZTA4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQXBwIFByb3ZpZGVycyBDb21wb25lbnRcbiAqIFxuICogV3JhcHMgdGhlIGFwcCB3aXRoIG5lY2Vzc2FyeSBwcm92aWRlcnMgZm9yIGNsaWVudC1zaWRlIGZ1bmN0aW9uYWxpdHkuXG4gKiBcbiAqIEBmaWxlb3ZlcnZpZXcgUHJvdmlkZXJzIHdyYXBwZXIgY29tcG9uZW50XG4gKiBAYXV0aG9yIE1lbnRhbCBIZWFsdGggSm91cm5hbCBBcHBcbiAqIEB2ZXJzaW9uIDEuMC4wXG4gKi9cblxuJ3VzZSBjbGllbnQnXG5cbmltcG9ydCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1vb2RBcGlQcm92aWRlciB9IGZyb20gJ0AvYXBwL2NvbnRleHRzL01vb2RBcGlDb250ZXh0JztcblxuaW50ZXJmYWNlIFByb3ZpZGVyc1Byb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUHJvdmlkZXJzKHsgY2hpbGRyZW4gfTogUHJvdmlkZXJzUHJvcHMpIHtcbiAgLy8gQVBJIGNsaWVudCBjb25maWd1cmF0aW9uXG4gIGNvbnN0IGFwaUNvbmZpZyA9IHtcbiAgICBiYXNlVVJMOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUElfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnLFxuICAgIHRpbWVvdXQ6IDMwMDAwLFxuICAgIHJldHJpZXM6IDMsXG4gICAgcmV0cnlEZWxheTogMTAwMCxcbiAgICBlbmFibGVDYWNoaW5nOiB0cnVlLFxuICAgIGNhY2hlVGltZW91dDogMzAwMDAwLCAvLyA1IG1pbnV0ZXNcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxNb29kQXBpUHJvdmlkZXIgY29uZmlnPXthcGlDb25maWd9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvTW9vZEFwaVByb3ZpZGVyPlxuICApO1xufVxuIl0sIm5hbWVzIjpbIk1vb2RBcGlQcm92aWRlciIsIlByb3ZpZGVycyIsImNoaWxkcmVuIiwiYXBpQ29uZmlnIiwiYmFzZVVSTCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19BUElfVVJMIiwidGltZW91dCIsInJldHJpZXMiLCJyZXRyeURlbGF5IiwiZW5hYmxlQ2FjaGluZyIsImNhY2hlVGltZW91dCIsImNvbmZpZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/components/Providers.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/components/ServiceWorkerRegistration.tsx":
/*!**********************************************************!*\
  !*** ./src/app/components/ServiceWorkerRegistration.tsx ***!
  \**********************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ServiceWorkerRegistration; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ default auto */ var _s = $RefreshSig$();\n\nfunction ServiceWorkerRegistration() {\n    _s();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if ( true && \"serviceWorker\" in navigator) {\n            // Register service worker\n            navigator.serviceWorker.register(\"/sw.js\").then((registration)=>{\n                console.log(\"Service Worker registered successfully:\", registration.scope);\n                // Check for updates\n                registration.addEventListener(\"updatefound\", ()=>{\n                    const newWorker = registration.installing;\n                    if (newWorker) {\n                        newWorker.addEventListener(\"statechange\", ()=>{\n                            if (newWorker.state === \"installed\" && navigator.serviceWorker.controller) {\n                                // New content is available, notify user\n                                if (confirm(\"New version available! Reload to update?\")) {\n                                    window.location.reload();\n                                }\n                            }\n                        });\n                    }\n                });\n            }).catch((error)=>{\n                console.error(\"Service Worker registration failed:\", error);\n            });\n            // Handle service worker messages\n            navigator.serviceWorker.addEventListener(\"message\", (event)=>{\n                if (event.data && event.data.type === \"CACHE_UPDATED\") {\n                    console.log(\"Cache updated:\", event.data.payload);\n                }\n            });\n            // Handle offline/online events\n            const handleOnline = ()=>{\n                console.log(\"App is online\");\n                // Trigger background sync if available\n                if (\"serviceWorker\" in navigator && \"sync\" in window.ServiceWorkerRegistration.prototype) {\n                    navigator.serviceWorker.ready.then((registration)=>{\n                        return registration.sync.register(\"mood-sync\");\n                    });\n                }\n            };\n            const handleOffline = ()=>{\n                console.log(\"App is offline\");\n            };\n            window.addEventListener(\"online\", handleOnline);\n            window.addEventListener(\"offline\", handleOffline);\n            // Cleanup\n            return ()=>{\n                window.removeEventListener(\"online\", handleOnline);\n                window.removeEventListener(\"offline\", handleOffline);\n            };\n        }\n    }, []);\n    return null;\n}\n_s(ServiceWorkerRegistration, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ServiceWorkerRegistration;\nvar _c;\n$RefreshReg$(_c, \"ServiceWorkerRegistration\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvY29tcG9uZW50cy9TZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRWlDO0FBRWxCLFNBQVNDOztJQUN0QkQsZ0RBQVNBLENBQUM7UUFDUixJQUFJLEtBQWtCLElBQWUsbUJBQW1CRSxXQUFXO1lBQ2pFLDBCQUEwQjtZQUMxQkEsVUFBVUMsYUFBYSxDQUNwQkMsUUFBUSxDQUFDLFVBQ1RDLElBQUksQ0FBQyxDQUFDQztnQkFDTEMsUUFBUUMsR0FBRyxDQUFDLDJDQUEyQ0YsYUFBYUcsS0FBSztnQkFFekUsb0JBQW9CO2dCQUNwQkgsYUFBYUksZ0JBQWdCLENBQUMsZUFBZTtvQkFDM0MsTUFBTUMsWUFBWUwsYUFBYU0sVUFBVTtvQkFDekMsSUFBSUQsV0FBVzt3QkFDYkEsVUFBVUQsZ0JBQWdCLENBQUMsZUFBZTs0QkFDeEMsSUFBSUMsVUFBVUUsS0FBSyxLQUFLLGVBQWVYLFVBQVVDLGFBQWEsQ0FBQ1csVUFBVSxFQUFFO2dDQUN6RSx3Q0FBd0M7Z0NBQ3hDLElBQUlDLFFBQVEsNkNBQTZDO29DQUN2REMsT0FBT0MsUUFBUSxDQUFDQyxNQUFNO2dDQUN4Qjs0QkFDRjt3QkFDRjtvQkFDRjtnQkFDRjtZQUNGLEdBQ0NDLEtBQUssQ0FBQyxDQUFDQztnQkFDTmIsUUFBUWEsS0FBSyxDQUFDLHVDQUF1Q0E7WUFDdkQ7WUFFRixpQ0FBaUM7WUFDakNsQixVQUFVQyxhQUFhLENBQUNPLGdCQUFnQixDQUFDLFdBQVcsQ0FBQ1c7Z0JBQ25ELElBQUlBLE1BQU1DLElBQUksSUFBSUQsTUFBTUMsSUFBSSxDQUFDQyxJQUFJLEtBQUssaUJBQWlCO29CQUNyRGhCLFFBQVFDLEdBQUcsQ0FBQyxrQkFBa0JhLE1BQU1DLElBQUksQ0FBQ0UsT0FBTztnQkFDbEQ7WUFDRjtZQUVBLCtCQUErQjtZQUMvQixNQUFNQyxlQUFlO2dCQUNuQmxCLFFBQVFDLEdBQUcsQ0FBQztnQkFDWix1Q0FBdUM7Z0JBQ3ZDLElBQUksbUJBQW1CTixhQUFhLFVBQVVjLE9BQU9mLHlCQUF5QixDQUFDeUIsU0FBUyxFQUFFO29CQUN4RnhCLFVBQVVDLGFBQWEsQ0FBQ3dCLEtBQUssQ0FBQ3RCLElBQUksQ0FBQyxDQUFDQzt3QkFDbEMsT0FBTyxhQUFzQnNCLElBQUksQ0FBQ3hCLFFBQVEsQ0FBQztvQkFDN0M7Z0JBQ0Y7WUFDRjtZQUVBLE1BQU15QixnQkFBZ0I7Z0JBQ3BCdEIsUUFBUUMsR0FBRyxDQUFDO1lBQ2Q7WUFFQVEsT0FBT04sZ0JBQWdCLENBQUMsVUFBVWU7WUFDbENULE9BQU9OLGdCQUFnQixDQUFDLFdBQVdtQjtZQUVuQyxVQUFVO1lBQ1YsT0FBTztnQkFDTGIsT0FBT2MsbUJBQW1CLENBQUMsVUFBVUw7Z0JBQ3JDVCxPQUFPYyxtQkFBbUIsQ0FBQyxXQUFXRDtZQUN4QztRQUNGO0lBQ0YsR0FBRyxFQUFFO0lBRUwsT0FBTztBQUNUO0dBOUR3QjVCO0tBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvY29tcG9uZW50cy9TZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uLnRzeD82ZWE4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xuXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbigpIHtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikge1xuICAgICAgLy8gUmVnaXN0ZXIgc2VydmljZSB3b3JrZXJcbiAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyXG4gICAgICAgIC5yZWdpc3RlcignL3N3LmpzJylcbiAgICAgICAgLnRoZW4oKHJlZ2lzdHJhdGlvbikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdTZXJ2aWNlIFdvcmtlciByZWdpc3RlcmVkIHN1Y2Nlc3NmdWxseTonLCByZWdpc3RyYXRpb24uc2NvcGUpXG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ2hlY2sgZm9yIHVwZGF0ZXNcbiAgICAgICAgICByZWdpc3RyYXRpb24uYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlZm91bmQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdXb3JrZXIgPSByZWdpc3RyYXRpb24uaW5zdGFsbGluZ1xuICAgICAgICAgICAgaWYgKG5ld1dvcmtlcikge1xuICAgICAgICAgICAgICBuZXdXb3JrZXIuYWRkRXZlbnRMaXN0ZW5lcignc3RhdGVjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1dvcmtlci5zdGF0ZSA9PT0gJ2luc3RhbGxlZCcgJiYgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgICAgLy8gTmV3IGNvbnRlbnQgaXMgYXZhaWxhYmxlLCBub3RpZnkgdXNlclxuICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpcm0oJ05ldyB2ZXJzaW9uIGF2YWlsYWJsZSEgUmVsb2FkIHRvIHVwZGF0ZT8nKSkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NlcnZpY2UgV29ya2VyIHJlZ2lzdHJhdGlvbiBmYWlsZWQ6JywgZXJyb3IpXG4gICAgICAgIH0pXG5cbiAgICAgIC8vIEhhbmRsZSBzZXJ2aWNlIHdvcmtlciBtZXNzYWdlc1xuICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuZGF0YSAmJiBldmVudC5kYXRhLnR5cGUgPT09ICdDQUNIRV9VUERBVEVEJykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdDYWNoZSB1cGRhdGVkOicsIGV2ZW50LmRhdGEucGF5bG9hZClcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgLy8gSGFuZGxlIG9mZmxpbmUvb25saW5lIGV2ZW50c1xuICAgICAgY29uc3QgaGFuZGxlT25saW5lID0gKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnQXBwIGlzIG9ubGluZScpXG4gICAgICAgIC8vIFRyaWdnZXIgYmFja2dyb3VuZCBzeW5jIGlmIGF2YWlsYWJsZVxuICAgICAgICBpZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvciAmJiAnc3luYycgaW4gd2luZG93LlNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ucHJvdG90eXBlKSB7XG4gICAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVhZHkudGhlbigocmVnaXN0cmF0aW9uKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKHJlZ2lzdHJhdGlvbiBhcyBhbnkpLnN5bmMucmVnaXN0ZXIoJ21vb2Qtc3luYycpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBoYW5kbGVPZmZsaW5lID0gKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnQXBwIGlzIG9mZmxpbmUnKVxuICAgICAgfVxuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25saW5lJywgaGFuZGxlT25saW5lKVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29mZmxpbmUnLCBoYW5kbGVPZmZsaW5lKVxuXG4gICAgICAvLyBDbGVhbnVwXG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb25saW5lJywgaGFuZGxlT25saW5lKVxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIGhhbmRsZU9mZmxpbmUpXG4gICAgICB9XG4gICAgfVxuICB9LCBbXSlcblxuICByZXR1cm4gbnVsbFxufVxuIl0sIm5hbWVzIjpbInVzZUVmZmVjdCIsIlNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24iLCJuYXZpZ2F0b3IiLCJzZXJ2aWNlV29ya2VyIiwicmVnaXN0ZXIiLCJ0aGVuIiwicmVnaXN0cmF0aW9uIiwiY29uc29sZSIsImxvZyIsInNjb3BlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm5ld1dvcmtlciIsImluc3RhbGxpbmciLCJzdGF0ZSIsImNvbnRyb2xsZXIiLCJjb25maXJtIiwid2luZG93IiwibG9jYXRpb24iLCJyZWxvYWQiLCJjYXRjaCIsImVycm9yIiwiZXZlbnQiLCJkYXRhIiwidHlwZSIsInBheWxvYWQiLCJoYW5kbGVPbmxpbmUiLCJwcm90b3R5cGUiLCJyZWFkeSIsInN5bmMiLCJoYW5kbGVPZmZsaW5lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/components/ServiceWorkerRegistration.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/contexts/MoodApiContext.tsx":
/*!*********************************************!*\
  !*** ./src/app/contexts/MoodApiContext.tsx ***!
  \*********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MoodApiProvider: function() { return /* binding */ MoodApiProvider; },\n/* harmony export */   useMoodApiContext: function() { return /* binding */ useMoodApiContext; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_mood_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/mood-api */ \"(app-pages-browser)/./src/lib/mood-api/index.ts\");\n/**\n * Mood API Context Provider\n * \n * Provides API client context to all components in the app.\n * \n * @fileoverview React context for API client\n * @author Mental Health Journal App\n * @version 1.0.0\n */ /* __next_internal_client_entry_do_not_use__ MoodApiProvider,useMoodApiContext auto */ \nvar _s = $RefreshSig$();\n\n\nconst MoodApiContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction MoodApiProvider(param) {\n    let { children, config } = param;\n    const client = new _lib_mood_api__WEBPACK_IMPORTED_MODULE_2__.MoodApiClient(config);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MoodApiContext.Provider, {\n        value: {\n            client\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/asimsinanyuksel/Desktop/MoodTracker/src/app/contexts/MoodApiContext.tsx\",\n        lineNumber: 31,\n        columnNumber: 5\n    }, this);\n}\n_c = MoodApiProvider;\nfunction useMoodApiContext() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(MoodApiContext);\n    if (context === undefined) {\n        throw new Error(\"useMoodApiContext must be used within a MoodApiProvider\");\n    }\n    return context;\n}\n_s(useMoodApiContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"MoodApiProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvY29udGV4dHMvTW9vZEFwaUNvbnRleHQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7Ozs7OztDQVFDOztBQUltRTtBQUNBO0FBTXBFLE1BQU1JLCtCQUFpQkgsb0RBQWFBLENBQWlDSTtBQU85RCxTQUFTQyxnQkFBZ0IsS0FBMEM7UUFBMUMsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQXdCLEdBQTFDO0lBQzlCLE1BQU1DLFNBQVMsSUFBSU4sd0RBQWFBLENBQUNLO0lBRWpDLHFCQUNFLDhEQUFDSixlQUFlTSxRQUFRO1FBQUNDLE9BQU87WUFBRUY7UUFBTztrQkFDdENGOzs7Ozs7QUFHUDtLQVJnQkQ7QUFVVCxTQUFTTTs7SUFDZCxNQUFNQyxVQUFVWCxpREFBVUEsQ0FBQ0U7SUFDM0IsSUFBSVMsWUFBWVIsV0FBVztRQUN6QixNQUFNLElBQUlTLE1BQU07SUFDbEI7SUFDQSxPQUFPRDtBQUNUO0dBTmdCRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvYXBwL2NvbnRleHRzL01vb2RBcGlDb250ZXh0LnRzeD9mMmZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9vZCBBUEkgQ29udGV4dCBQcm92aWRlclxuICogXG4gKiBQcm92aWRlcyBBUEkgY2xpZW50IGNvbnRleHQgdG8gYWxsIGNvbXBvbmVudHMgaW4gdGhlIGFwcC5cbiAqIFxuICogQGZpbGVvdmVydmlldyBSZWFjdCBjb250ZXh0IGZvciBBUEkgY2xpZW50XG4gKiBAYXV0aG9yIE1lbnRhbCBIZWFsdGggSm91cm5hbCBBcHBcbiAqIEB2ZXJzaW9uIDEuMC4wXG4gKi9cblxuJ3VzZSBjbGllbnQnXG5cbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNb29kQXBpQ2xpZW50LCBNb29kQXBpQ2xpZW50Q29uZmlnIH0gZnJvbSAnQC9saWIvbW9vZC1hcGknO1xuXG5pbnRlcmZhY2UgTW9vZEFwaUNvbnRleHRUeXBlIHtcbiAgY2xpZW50OiBNb29kQXBpQ2xpZW50O1xufVxuXG5jb25zdCBNb29kQXBpQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8TW9vZEFwaUNvbnRleHRUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG5pbnRlcmZhY2UgTW9vZEFwaVByb3ZpZGVyUHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xuICBjb25maWc6IE1vb2RBcGlDbGllbnRDb25maWc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBNb29kQXBpUHJvdmlkZXIoeyBjaGlsZHJlbiwgY29uZmlnIH06IE1vb2RBcGlQcm92aWRlclByb3BzKSB7XG4gIGNvbnN0IGNsaWVudCA9IG5ldyBNb29kQXBpQ2xpZW50KGNvbmZpZyk7XG5cbiAgcmV0dXJuIChcbiAgICA8TW9vZEFwaUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgY2xpZW50IH19PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvTW9vZEFwaUNvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VNb29kQXBpQ29udGV4dCgpOiBNb29kQXBpQ29udGV4dFR5cGUge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChNb29kQXBpQ29udGV4dCk7XG4gIGlmIChjb250ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VzZU1vb2RBcGlDb250ZXh0IG11c3QgYmUgdXNlZCB3aXRoaW4gYSBNb29kQXBpUHJvdmlkZXInKTtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn1cbiJdLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwiTW9vZEFwaUNsaWVudCIsIk1vb2RBcGlDb250ZXh0IiwidW5kZWZpbmVkIiwiTW9vZEFwaVByb3ZpZGVyIiwiY2hpbGRyZW4iLCJjb25maWciLCJjbGllbnQiLCJQcm92aWRlciIsInZhbHVlIiwidXNlTW9vZEFwaUNvbnRleHQiLCJjb250ZXh0IiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/contexts/MoodApiContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/mood-api/client/CacheService.ts":
/*!*************************************************!*\
  !*** ./src/lib/mood-api/client/CacheService.ts ***!
  \*************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheService: function() { return /* binding */ CacheService; }\n/* harmony export */ });\n/**\n * Cache Service for API Responses\n * \n * Provides intelligent caching for API responses with TTL and invalidation.\n * \n * @fileoverview API response caching service\n * @author Mental Health Journal App\n * @version 1.0.0\n */ class CacheService {\n    /**\n   * Get cached data\n   */ get(key) {\n        const entry = this.cache.get(key);\n        if (!entry) {\n            return null;\n        }\n        // Check if entry has expired\n        if (Date.now() - entry.timestamp > entry.ttl) {\n            this.cache.delete(key);\n            this.saveToStorage();\n            return null;\n        }\n        return entry.data;\n    }\n    /**\n   * Set cached data\n   */ set(key, data, ttl) {\n        const entry = {\n            data,\n            timestamp: Date.now(),\n            ttl: ttl || this.config.defaultTTL,\n            key\n        };\n        // Remove oldest entries if cache is full\n        if (this.cache.size >= this.config.maxSize) {\n            const oldestKey = this.getOldestKey();\n            if (oldestKey) {\n                this.cache.delete(oldestKey);\n            }\n        }\n        this.cache.set(key, entry);\n        this.saveToStorage();\n    }\n    /**\n   * Check if key exists and is valid\n   */ has(key) {\n        const entry = this.cache.get(key);\n        if (!entry) {\n            return false;\n        }\n        // Check if entry has expired\n        if (Date.now() - entry.timestamp > entry.ttl) {\n            this.cache.delete(key);\n            this.saveToStorage();\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Delete cached data\n   */ delete(key) {\n        const deleted = this.cache.delete(key);\n        if (deleted) {\n            this.saveToStorage();\n        }\n        return deleted;\n    }\n    /**\n   * Clear all cached data\n   */ clear() {\n        this.cache.clear();\n        this.saveToStorage();\n    }\n    /**\n   * Invalidate cache entries matching pattern\n   */ invalidate(pattern) {\n        let count = 0;\n        const regex = typeof pattern === \"string\" ? new RegExp(pattern) : pattern;\n        for (const key of this.cache.keys()){\n            if (regex.test(key)) {\n                this.cache.delete(key);\n                count++;\n            }\n        }\n        if (count > 0) {\n            this.saveToStorage();\n        }\n        return count;\n    }\n    /**\n   * Get cache statistics\n   */ getStats() {\n        const keys = Array.from(this.cache.keys());\n        const memoryUsage = this.estimateMemoryUsage();\n        return {\n            size: this.cache.size,\n            maxSize: this.config.maxSize,\n            hitRate: 0,\n            keys,\n            memoryUsage\n        };\n    }\n    /**\n   * Get all cache keys\n   */ getKeys() {\n        return Array.from(this.cache.keys());\n    }\n    /**\n   * Check if cache is full\n   */ isFull() {\n        return this.cache.size >= this.config.maxSize;\n    }\n    /**\n   * Get cache size\n   */ size() {\n        return this.cache.size;\n    }\n    /**\n   * Get oldest cache key\n   */ getOldestKey() {\n        let oldestKey = null;\n        let oldestTime = Date.now();\n        for (const [key, entry] of this.cache.entries()){\n            if (entry.timestamp < oldestTime) {\n                oldestTime = entry.timestamp;\n                oldestKey = key;\n            }\n        }\n        return oldestKey;\n    }\n    /**\n   * Load cache from localStorage\n   */ loadFromStorage() {\n        try {\n            const stored = localStorage.getItem(this.config.storageKey);\n            if (stored) {\n                const data = JSON.parse(stored);\n                this.cache = new Map(data);\n            }\n        } catch (error) {\n            console.warn(\"Failed to load cache from storage:\", error);\n        }\n    }\n    /**\n   * Save cache to localStorage\n   */ saveToStorage() {\n        try {\n            const data = Array.from(this.cache.entries());\n            localStorage.setItem(this.config.storageKey, JSON.stringify(data));\n        } catch (error) {\n            console.warn(\"Failed to save cache to storage:\", error);\n        }\n    }\n    /**\n   * Estimate memory usage\n   */ estimateMemoryUsage() {\n        let size = 0;\n        for (const [key, entry] of this.cache.entries()){\n            size += key.length * 2; // UTF-16\n            size += JSON.stringify(entry).length * 2;\n        }\n        return size;\n    }\n    /**\n   * Clean expired entries\n   */ cleanExpired() {\n        const now = Date.now();\n        let count = 0;\n        for (const [key, entry] of this.cache.entries()){\n            if (now - entry.timestamp > entry.ttl) {\n                this.cache.delete(key);\n                count++;\n            }\n        }\n        if (count > 0) {\n            this.saveToStorage();\n        }\n        return count;\n    }\n    /**\n   * Set TTL for existing entry\n   */ setTTL(key, ttl) {\n        const entry = this.cache.get(key);\n        if (entry) {\n            entry.ttl = ttl;\n            this.saveToStorage();\n            return true;\n        }\n        return false;\n    }\n    /**\n   * Get TTL for entry\n   */ getTTL(key) {\n        const entry = this.cache.get(key);\n        return entry ? entry.ttl : null;\n    }\n    /**\n   * Get remaining TTL for entry\n   */ getRemainingTTL(key) {\n        const entry = this.cache.get(key);\n        if (!entry) {\n            return null;\n        }\n        const remaining = entry.ttl - (Date.now() - entry.timestamp);\n        return Math.max(0, remaining);\n    }\n    constructor(config = {}){\n        this.cache = new Map();\n        this.config = {\n            defaultTTL: 300000,\n            maxSize: 100,\n            enablePersistence: true,\n            storageKey: \"moodtracker-api-cache\",\n            ...config\n        };\n        if (this.config.enablePersistence && \"object\" !== \"undefined\") {\n            this.loadFromStorage();\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvbW9vZC1hcGkvY2xpZW50L0NhY2hlU2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7O0NBUUMsR0FnQk0sTUFBTUE7SUFrQlg7O0dBRUMsR0FDREMsSUFBT0MsR0FBVyxFQUFZO1FBQzVCLE1BQU1DLFFBQVEsSUFBSSxDQUFDQyxLQUFLLENBQUNILEdBQUcsQ0FBQ0M7UUFFN0IsSUFBSSxDQUFDQyxPQUFPO1lBQ1YsT0FBTztRQUNUO1FBRUEsNkJBQTZCO1FBQzdCLElBQUlFLEtBQUtDLEdBQUcsS0FBS0gsTUFBTUksU0FBUyxHQUFHSixNQUFNSyxHQUFHLEVBQUU7WUFDNUMsSUFBSSxDQUFDSixLQUFLLENBQUNLLE1BQU0sQ0FBQ1A7WUFDbEIsSUFBSSxDQUFDUSxhQUFhO1lBQ2xCLE9BQU87UUFDVDtRQUVBLE9BQU9QLE1BQU1RLElBQUk7SUFDbkI7SUFFQTs7R0FFQyxHQUNEQyxJQUFPVixHQUFXLEVBQUVTLElBQU8sRUFBRUgsR0FBWSxFQUFRO1FBQy9DLE1BQU1MLFFBQXVCO1lBQzNCUTtZQUNBSixXQUFXRixLQUFLQyxHQUFHO1lBQ25CRSxLQUFLQSxPQUFPLElBQUksQ0FBQ0ssTUFBTSxDQUFDQyxVQUFVO1lBQ2xDWjtRQUNGO1FBRUEseUNBQXlDO1FBQ3pDLElBQUksSUFBSSxDQUFDRSxLQUFLLENBQUNXLElBQUksSUFBSSxJQUFJLENBQUNGLE1BQU0sQ0FBQ0csT0FBTyxFQUFFO1lBQzFDLE1BQU1DLFlBQVksSUFBSSxDQUFDQyxZQUFZO1lBQ25DLElBQUlELFdBQVc7Z0JBQ2IsSUFBSSxDQUFDYixLQUFLLENBQUNLLE1BQU0sQ0FBQ1E7WUFDcEI7UUFDRjtRQUVBLElBQUksQ0FBQ2IsS0FBSyxDQUFDUSxHQUFHLENBQUNWLEtBQUtDO1FBQ3BCLElBQUksQ0FBQ08sYUFBYTtJQUNwQjtJQUVBOztHQUVDLEdBQ0RTLElBQUlqQixHQUFXLEVBQVc7UUFDeEIsTUFBTUMsUUFBUSxJQUFJLENBQUNDLEtBQUssQ0FBQ0gsR0FBRyxDQUFDQztRQUU3QixJQUFJLENBQUNDLE9BQU87WUFDVixPQUFPO1FBQ1Q7UUFFQSw2QkFBNkI7UUFDN0IsSUFBSUUsS0FBS0MsR0FBRyxLQUFLSCxNQUFNSSxTQUFTLEdBQUdKLE1BQU1LLEdBQUcsRUFBRTtZQUM1QyxJQUFJLENBQUNKLEtBQUssQ0FBQ0ssTUFBTSxDQUFDUDtZQUNsQixJQUFJLENBQUNRLGFBQWE7WUFDbEIsT0FBTztRQUNUO1FBRUEsT0FBTztJQUNUO0lBRUE7O0dBRUMsR0FDREQsT0FBT1AsR0FBVyxFQUFXO1FBQzNCLE1BQU1rQixVQUFVLElBQUksQ0FBQ2hCLEtBQUssQ0FBQ0ssTUFBTSxDQUFDUDtRQUNsQyxJQUFJa0IsU0FBUztZQUNYLElBQUksQ0FBQ1YsYUFBYTtRQUNwQjtRQUNBLE9BQU9VO0lBQ1Q7SUFFQTs7R0FFQyxHQUNEQyxRQUFjO1FBQ1osSUFBSSxDQUFDakIsS0FBSyxDQUFDaUIsS0FBSztRQUNoQixJQUFJLENBQUNYLGFBQWE7SUFDcEI7SUFFQTs7R0FFQyxHQUNEWSxXQUFXQyxPQUF3QixFQUFVO1FBQzNDLElBQUlDLFFBQVE7UUFDWixNQUFNQyxRQUFRLE9BQU9GLFlBQVksV0FBVyxJQUFJRyxPQUFPSCxXQUFXQTtRQUVsRSxLQUFLLE1BQU1yQixPQUFPLElBQUksQ0FBQ0UsS0FBSyxDQUFDdUIsSUFBSSxHQUFJO1lBQ25DLElBQUlGLE1BQU1HLElBQUksQ0FBQzFCLE1BQU07Z0JBQ25CLElBQUksQ0FBQ0UsS0FBSyxDQUFDSyxNQUFNLENBQUNQO2dCQUNsQnNCO1lBQ0Y7UUFDRjtRQUVBLElBQUlBLFFBQVEsR0FBRztZQUNiLElBQUksQ0FBQ2QsYUFBYTtRQUNwQjtRQUVBLE9BQU9jO0lBQ1Q7SUFFQTs7R0FFQyxHQUNESyxXQU1FO1FBQ0EsTUFBTUYsT0FBT0csTUFBTUMsSUFBSSxDQUFDLElBQUksQ0FBQzNCLEtBQUssQ0FBQ3VCLElBQUk7UUFDdkMsTUFBTUssY0FBYyxJQUFJLENBQUNDLG1CQUFtQjtRQUU1QyxPQUFPO1lBQ0xsQixNQUFNLElBQUksQ0FBQ1gsS0FBSyxDQUFDVyxJQUFJO1lBQ3JCQyxTQUFTLElBQUksQ0FBQ0gsTUFBTSxDQUFDRyxPQUFPO1lBQzVCa0IsU0FBUztZQUNUUDtZQUNBSztRQUNGO0lBQ0Y7SUFFQTs7R0FFQyxHQUNERyxVQUFvQjtRQUNsQixPQUFPTCxNQUFNQyxJQUFJLENBQUMsSUFBSSxDQUFDM0IsS0FBSyxDQUFDdUIsSUFBSTtJQUNuQztJQUVBOztHQUVDLEdBQ0RTLFNBQWtCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDaEMsS0FBSyxDQUFDVyxJQUFJLElBQUksSUFBSSxDQUFDRixNQUFNLENBQUNHLE9BQU87SUFDL0M7SUFFQTs7R0FFQyxHQUNERCxPQUFlO1FBQ2IsT0FBTyxJQUFJLENBQUNYLEtBQUssQ0FBQ1csSUFBSTtJQUN4QjtJQUVBOztHQUVDLEdBQ0QsZUFBc0M7UUFDcEMsSUFBSUUsWUFBMkI7UUFDL0IsSUFBSW9CLGFBQWFoQyxLQUFLQyxHQUFHO1FBRXpCLEtBQUssTUFBTSxDQUFDSixLQUFLQyxNQUFNLElBQUksSUFBSSxDQUFDQyxLQUFLLENBQUNrQyxPQUFPLEdBQUk7WUFDL0MsSUFBSW5DLE1BQU1JLFNBQVMsR0FBRzhCLFlBQVk7Z0JBQ2hDQSxhQUFhbEMsTUFBTUksU0FBUztnQkFDNUJVLFlBQVlmO1lBQ2Q7UUFDRjtRQUVBLE9BQU9lO0lBQ1Q7SUFFQTs7R0FFQyxHQUNELGtCQUFnQztRQUM5QixJQUFJO1lBQ0YsTUFBTXVCLFNBQVNDLGFBQWFDLE9BQU8sQ0FBQyxJQUFJLENBQUM3QixNQUFNLENBQUM4QixVQUFVO1lBQzFELElBQUlILFFBQVE7Z0JBQ1YsTUFBTTdCLE9BQU9pQyxLQUFLQyxLQUFLLENBQUNMO2dCQUN4QixJQUFJLENBQUNwQyxLQUFLLEdBQUcsSUFBSTBDLElBQUluQztZQUN2QjtRQUNGLEVBQUUsT0FBT29DLE9BQU87WUFDZEMsUUFBUUMsSUFBSSxDQUFDLHNDQUFzQ0Y7UUFDckQ7SUFDRjtJQUVBOztHQUVDLEdBQ0QsZ0JBQThCO1FBQzVCLElBQUk7WUFDRixNQUFNcEMsT0FBT21CLE1BQU1DLElBQUksQ0FBQyxJQUFJLENBQUMzQixLQUFLLENBQUNrQyxPQUFPO1lBQzFDRyxhQUFhUyxPQUFPLENBQUMsSUFBSSxDQUFDckMsTUFBTSxDQUFDOEIsVUFBVSxFQUFFQyxLQUFLTyxTQUFTLENBQUN4QztRQUM5RCxFQUFFLE9BQU9vQyxPQUFPO1lBQ2RDLFFBQVFDLElBQUksQ0FBQyxvQ0FBb0NGO1FBQ25EO0lBQ0Y7SUFFQTs7R0FFQyxHQUNELHNCQUFzQztRQUNwQyxJQUFJaEMsT0FBTztRQUVYLEtBQUssTUFBTSxDQUFDYixLQUFLQyxNQUFNLElBQUksSUFBSSxDQUFDQyxLQUFLLENBQUNrQyxPQUFPLEdBQUk7WUFDL0N2QixRQUFRYixJQUFJa0QsTUFBTSxHQUFHLEdBQUcsU0FBUztZQUNqQ3JDLFFBQVE2QixLQUFLTyxTQUFTLENBQUNoRCxPQUFPaUQsTUFBTSxHQUFHO1FBQ3pDO1FBRUEsT0FBT3JDO0lBQ1Q7SUFFQTs7R0FFQyxHQUNEc0MsZUFBdUI7UUFDckIsTUFBTS9DLE1BQU1ELEtBQUtDLEdBQUc7UUFDcEIsSUFBSWtCLFFBQVE7UUFFWixLQUFLLE1BQU0sQ0FBQ3RCLEtBQUtDLE1BQU0sSUFBSSxJQUFJLENBQUNDLEtBQUssQ0FBQ2tDLE9BQU8sR0FBSTtZQUMvQyxJQUFJaEMsTUFBTUgsTUFBTUksU0FBUyxHQUFHSixNQUFNSyxHQUFHLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQ0osS0FBSyxDQUFDSyxNQUFNLENBQUNQO2dCQUNsQnNCO1lBQ0Y7UUFDRjtRQUVBLElBQUlBLFFBQVEsR0FBRztZQUNiLElBQUksQ0FBQ2QsYUFBYTtRQUNwQjtRQUVBLE9BQU9jO0lBQ1Q7SUFFQTs7R0FFQyxHQUNEOEIsT0FBT3BELEdBQVcsRUFBRU0sR0FBVyxFQUFXO1FBQ3hDLE1BQU1MLFFBQVEsSUFBSSxDQUFDQyxLQUFLLENBQUNILEdBQUcsQ0FBQ0M7UUFDN0IsSUFBSUMsT0FBTztZQUNUQSxNQUFNSyxHQUFHLEdBQUdBO1lBQ1osSUFBSSxDQUFDRSxhQUFhO1lBQ2xCLE9BQU87UUFDVDtRQUNBLE9BQU87SUFDVDtJQUVBOztHQUVDLEdBQ0Q2QyxPQUFPckQsR0FBVyxFQUFpQjtRQUNqQyxNQUFNQyxRQUFRLElBQUksQ0FBQ0MsS0FBSyxDQUFDSCxHQUFHLENBQUNDO1FBQzdCLE9BQU9DLFFBQVFBLE1BQU1LLEdBQUcsR0FBRztJQUM3QjtJQUVBOztHQUVDLEdBQ0RnRCxnQkFBZ0J0RCxHQUFXLEVBQWlCO1FBQzFDLE1BQU1DLFFBQVEsSUFBSSxDQUFDQyxLQUFLLENBQUNILEdBQUcsQ0FBQ0M7UUFDN0IsSUFBSSxDQUFDQyxPQUFPO1lBQ1YsT0FBTztRQUNUO1FBRUEsTUFBTXNELFlBQVl0RCxNQUFNSyxHQUFHLEdBQUlILENBQUFBLEtBQUtDLEdBQUcsS0FBS0gsTUFBTUksU0FBUztRQUMzRCxPQUFPbUQsS0FBS0MsR0FBRyxDQUFDLEdBQUdGO0lBQ3JCO0lBL1FBRyxZQUFZL0MsU0FBK0IsQ0FBQyxDQUFDLENBQUU7YUFIdkNULFFBQWlDLElBQUkwQztRQUkzQyxJQUFJLENBQUNqQyxNQUFNLEdBQUc7WUFDWkMsWUFBWTtZQUNaRSxTQUFTO1lBQ1Q2QyxtQkFBbUI7WUFDbkJsQixZQUFZO1lBQ1osR0FBRzlCLE1BQU07UUFDWDtRQUVBLElBQUksSUFBSSxDQUFDQSxNQUFNLENBQUNnRCxpQkFBaUIsSUFBSSxhQUFrQixhQUFhO1lBQ2xFLElBQUksQ0FBQ3RCLGVBQWU7UUFDdEI7SUFDRjtBQW9RRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvbGliL21vb2QtYXBpL2NsaWVudC9DYWNoZVNlcnZpY2UudHM/NzY4MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENhY2hlIFNlcnZpY2UgZm9yIEFQSSBSZXNwb25zZXNcbiAqIFxuICogUHJvdmlkZXMgaW50ZWxsaWdlbnQgY2FjaGluZyBmb3IgQVBJIHJlc3BvbnNlcyB3aXRoIFRUTCBhbmQgaW52YWxpZGF0aW9uLlxuICogXG4gKiBAZmlsZW92ZXJ2aWV3IEFQSSByZXNwb25zZSBjYWNoaW5nIHNlcnZpY2VcbiAqIEBhdXRob3IgTWVudGFsIEhlYWx0aCBKb3VybmFsIEFwcFxuICogQHZlcnNpb24gMS4wLjBcbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIENhY2hlRW50cnk8VCA9IGFueT4ge1xuICBkYXRhOiBUO1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgdHRsOiBudW1iZXI7XG4gIGtleTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhY2hlQ29uZmlnIHtcbiAgZGVmYXVsdFRUTDogbnVtYmVyO1xuICBtYXhTaXplOiBudW1iZXI7XG4gIGVuYWJsZVBlcnNpc3RlbmNlOiBib29sZWFuO1xuICBzdG9yYWdlS2V5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBDYWNoZVNlcnZpY2Uge1xuICBwcml2YXRlIGNhY2hlOiBNYXA8c3RyaW5nLCBDYWNoZUVudHJ5PiA9IG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSBjb25maWc6IENhY2hlQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUGFydGlhbDxDYWNoZUNvbmZpZz4gPSB7fSkge1xuICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgZGVmYXVsdFRUTDogMzAwMDAwLCAvLyA1IG1pbnV0ZXNcbiAgICAgIG1heFNpemU6IDEwMCxcbiAgICAgIGVuYWJsZVBlcnNpc3RlbmNlOiB0cnVlLFxuICAgICAgc3RvcmFnZUtleTogJ21vb2R0cmFja2VyLWFwaS1jYWNoZScsXG4gICAgICAuLi5jb25maWcsXG4gICAgfTtcblxuICAgIGlmICh0aGlzLmNvbmZpZy5lbmFibGVQZXJzaXN0ZW5jZSAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5sb2FkRnJvbVN0b3JhZ2UoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNhY2hlZCBkYXRhXG4gICAqL1xuICBnZXQ8VD4oa2V5OiBzdHJpbmcpOiBUIHwgbnVsbCB7XG4gICAgY29uc3QgZW50cnkgPSB0aGlzLmNhY2hlLmdldChrZXkpO1xuICAgIFxuICAgIGlmICghZW50cnkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIGVudHJ5IGhhcyBleHBpcmVkXG4gICAgaWYgKERhdGUubm93KCkgLSBlbnRyeS50aW1lc3RhbXAgPiBlbnRyeS50dGwpIHtcbiAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgICB0aGlzLnNhdmVUb1N0b3JhZ2UoKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBlbnRyeS5kYXRhIGFzIFQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGNhY2hlZCBkYXRhXG4gICAqL1xuICBzZXQ8VD4oa2V5OiBzdHJpbmcsIGRhdGE6IFQsIHR0bD86IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGVudHJ5OiBDYWNoZUVudHJ5PFQ+ID0ge1xuICAgICAgZGF0YSxcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIHR0bDogdHRsIHx8IHRoaXMuY29uZmlnLmRlZmF1bHRUVEwsXG4gICAgICBrZXksXG4gICAgfTtcblxuICAgIC8vIFJlbW92ZSBvbGRlc3QgZW50cmllcyBpZiBjYWNoZSBpcyBmdWxsXG4gICAgaWYgKHRoaXMuY2FjaGUuc2l6ZSA+PSB0aGlzLmNvbmZpZy5tYXhTaXplKSB7XG4gICAgICBjb25zdCBvbGRlc3RLZXkgPSB0aGlzLmdldE9sZGVzdEtleSgpO1xuICAgICAgaWYgKG9sZGVzdEtleSkge1xuICAgICAgICB0aGlzLmNhY2hlLmRlbGV0ZShvbGRlc3RLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgZW50cnkpO1xuICAgIHRoaXMuc2F2ZVRvU3RvcmFnZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGtleSBleGlzdHMgYW5kIGlzIHZhbGlkXG4gICAqL1xuICBoYXMoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBlbnRyeSA9IHRoaXMuY2FjaGUuZ2V0KGtleSk7XG4gICAgXG4gICAgaWYgKCFlbnRyeSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIGVudHJ5IGhhcyBleHBpcmVkXG4gICAgaWYgKERhdGUubm93KCkgLSBlbnRyeS50aW1lc3RhbXAgPiBlbnRyeS50dGwpIHtcbiAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgICB0aGlzLnNhdmVUb1N0b3JhZ2UoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgY2FjaGVkIGRhdGFcbiAgICovXG4gIGRlbGV0ZShrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGRlbGV0ZWQgPSB0aGlzLmNhY2hlLmRlbGV0ZShrZXkpO1xuICAgIGlmIChkZWxldGVkKSB7XG4gICAgICB0aGlzLnNhdmVUb1N0b3JhZ2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIGNhY2hlZCBkYXRhXG4gICAqL1xuICBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLmNhY2hlLmNsZWFyKCk7XG4gICAgdGhpcy5zYXZlVG9TdG9yYWdlKCk7XG4gIH1cblxuICAvKipcbiAgICogSW52YWxpZGF0ZSBjYWNoZSBlbnRyaWVzIG1hdGNoaW5nIHBhdHRlcm5cbiAgICovXG4gIGludmFsaWRhdGUocGF0dGVybjogc3RyaW5nIHwgUmVnRXhwKTogbnVtYmVyIHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGNvbnN0IHJlZ2V4ID0gdHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnID8gbmV3IFJlZ0V4cChwYXR0ZXJuKSA6IHBhdHRlcm47XG5cbiAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLmNhY2hlLmtleXMoKSkge1xuICAgICAgaWYgKHJlZ2V4LnRlc3Qoa2V5KSkge1xuICAgICAgICB0aGlzLmNhY2hlLmRlbGV0ZShrZXkpO1xuICAgICAgICBjb3VudCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgIHRoaXMuc2F2ZVRvU3RvcmFnZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBjb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY2FjaGUgc3RhdGlzdGljc1xuICAgKi9cbiAgZ2V0U3RhdHMoKToge1xuICAgIHNpemU6IG51bWJlcjtcbiAgICBtYXhTaXplOiBudW1iZXI7XG4gICAgaGl0UmF0ZTogbnVtYmVyO1xuICAgIGtleXM6IHN0cmluZ1tdO1xuICAgIG1lbW9yeVVzYWdlOiBudW1iZXI7XG4gIH0ge1xuICAgIGNvbnN0IGtleXMgPSBBcnJheS5mcm9tKHRoaXMuY2FjaGUua2V5cygpKTtcbiAgICBjb25zdCBtZW1vcnlVc2FnZSA9IHRoaXMuZXN0aW1hdGVNZW1vcnlVc2FnZSgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNpemU6IHRoaXMuY2FjaGUuc2l6ZSxcbiAgICAgIG1heFNpemU6IHRoaXMuY29uZmlnLm1heFNpemUsXG4gICAgICBoaXRSYXRlOiAwLCAvLyBXb3VsZCBuZWVkIHRvIHRyYWNrIGhpdHMvbWlzc2VzXG4gICAgICBrZXlzLFxuICAgICAgbWVtb3J5VXNhZ2UsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIGNhY2hlIGtleXNcbiAgICovXG4gIGdldEtleXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuY2FjaGUua2V5cygpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBjYWNoZSBpcyBmdWxsXG4gICAqL1xuICBpc0Z1bGwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuc2l6ZSA+PSB0aGlzLmNvbmZpZy5tYXhTaXplO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjYWNoZSBzaXplXG4gICAqL1xuICBzaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuc2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb2xkZXN0IGNhY2hlIGtleVxuICAgKi9cbiAgcHJpdmF0ZSBnZXRPbGRlc3RLZXkoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgbGV0IG9sZGVzdEtleTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gICAgbGV0IG9sZGVzdFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgZm9yIChjb25zdCBba2V5LCBlbnRyeV0gb2YgdGhpcy5jYWNoZS5lbnRyaWVzKCkpIHtcbiAgICAgIGlmIChlbnRyeS50aW1lc3RhbXAgPCBvbGRlc3RUaW1lKSB7XG4gICAgICAgIG9sZGVzdFRpbWUgPSBlbnRyeS50aW1lc3RhbXA7XG4gICAgICAgIG9sZGVzdEtleSA9IGtleTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2xkZXN0S2V5O1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWQgY2FjaGUgZnJvbSBsb2NhbFN0b3JhZ2VcbiAgICovXG4gIHByaXZhdGUgbG9hZEZyb21TdG9yYWdlKCk6IHZvaWQge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdG9yZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmNvbmZpZy5zdG9yYWdlS2V5KTtcbiAgICAgIGlmIChzdG9yZWQpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2Uoc3RvcmVkKTtcbiAgICAgICAgdGhpcy5jYWNoZSA9IG5ldyBNYXAoZGF0YSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIGxvYWQgY2FjaGUgZnJvbSBzdG9yYWdlOicsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2F2ZSBjYWNoZSB0byBsb2NhbFN0b3JhZ2VcbiAgICovXG4gIHByaXZhdGUgc2F2ZVRvU3RvcmFnZSgpOiB2b2lkIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YSA9IEFycmF5LmZyb20odGhpcy5jYWNoZS5lbnRyaWVzKCkpO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5jb25maWcuc3RvcmFnZUtleSwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBzYXZlIGNhY2hlIHRvIHN0b3JhZ2U6JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFc3RpbWF0ZSBtZW1vcnkgdXNhZ2VcbiAgICovXG4gIHByaXZhdGUgZXN0aW1hdGVNZW1vcnlVc2FnZSgpOiBudW1iZXIge1xuICAgIGxldCBzaXplID0gMDtcbiAgICBcbiAgICBmb3IgKGNvbnN0IFtrZXksIGVudHJ5XSBvZiB0aGlzLmNhY2hlLmVudHJpZXMoKSkge1xuICAgICAgc2l6ZSArPSBrZXkubGVuZ3RoICogMjsgLy8gVVRGLTE2XG4gICAgICBzaXplICs9IEpTT04uc3RyaW5naWZ5KGVudHJ5KS5sZW5ndGggKiAyO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gc2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbiBleHBpcmVkIGVudHJpZXNcbiAgICovXG4gIGNsZWFuRXhwaXJlZCgpOiBudW1iZXIge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgbGV0IGNvdW50ID0gMDtcblxuICAgIGZvciAoY29uc3QgW2tleSwgZW50cnldIG9mIHRoaXMuY2FjaGUuZW50cmllcygpKSB7XG4gICAgICBpZiAobm93IC0gZW50cnkudGltZXN0YW1wID4gZW50cnkudHRsKSB7XG4gICAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgdGhpcy5zYXZlVG9TdG9yYWdlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBUVEwgZm9yIGV4aXN0aW5nIGVudHJ5XG4gICAqL1xuICBzZXRUVEwoa2V5OiBzdHJpbmcsIHR0bDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZW50cnkgPSB0aGlzLmNhY2hlLmdldChrZXkpO1xuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudHRsID0gdHRsO1xuICAgICAgdGhpcy5zYXZlVG9TdG9yYWdlKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBUVEwgZm9yIGVudHJ5XG4gICAqL1xuICBnZXRUVEwoa2V5OiBzdHJpbmcpOiBudW1iZXIgfCBudWxsIHtcbiAgICBjb25zdCBlbnRyeSA9IHRoaXMuY2FjaGUuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ID8gZW50cnkudHRsIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcmVtYWluaW5nIFRUTCBmb3IgZW50cnlcbiAgICovXG4gIGdldFJlbWFpbmluZ1RUTChrZXk6IHN0cmluZyk6IG51bWJlciB8IG51bGwge1xuICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5jYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAoIWVudHJ5KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCByZW1haW5pbmcgPSBlbnRyeS50dGwgLSAoRGF0ZS5ub3coKSAtIGVudHJ5LnRpbWVzdGFtcCk7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIHJlbWFpbmluZyk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJDYWNoZVNlcnZpY2UiLCJnZXQiLCJrZXkiLCJlbnRyeSIsImNhY2hlIiwiRGF0ZSIsIm5vdyIsInRpbWVzdGFtcCIsInR0bCIsImRlbGV0ZSIsInNhdmVUb1N0b3JhZ2UiLCJkYXRhIiwic2V0IiwiY29uZmlnIiwiZGVmYXVsdFRUTCIsInNpemUiLCJtYXhTaXplIiwib2xkZXN0S2V5IiwiZ2V0T2xkZXN0S2V5IiwiaGFzIiwiZGVsZXRlZCIsImNsZWFyIiwiaW52YWxpZGF0ZSIsInBhdHRlcm4iLCJjb3VudCIsInJlZ2V4IiwiUmVnRXhwIiwia2V5cyIsInRlc3QiLCJnZXRTdGF0cyIsIkFycmF5IiwiZnJvbSIsIm1lbW9yeVVzYWdlIiwiZXN0aW1hdGVNZW1vcnlVc2FnZSIsImhpdFJhdGUiLCJnZXRLZXlzIiwiaXNGdWxsIiwib2xkZXN0VGltZSIsImVudHJpZXMiLCJsb2FkRnJvbVN0b3JhZ2UiLCJzdG9yZWQiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic3RvcmFnZUtleSIsIkpTT04iLCJwYXJzZSIsIk1hcCIsImVycm9yIiwiY29uc29sZSIsIndhcm4iLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwibGVuZ3RoIiwiY2xlYW5FeHBpcmVkIiwic2V0VFRMIiwiZ2V0VFRMIiwiZ2V0UmVtYWluaW5nVFRMIiwicmVtYWluaW5nIiwiTWF0aCIsIm1heCIsImNvbnN0cnVjdG9yIiwiZW5hYmxlUGVyc2lzdGVuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/mood-api/client/CacheService.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/mood-api/client/DataTransformService.ts":
/*!*********************************************************!*\
  !*** ./src/lib/mood-api/client/DataTransformService.ts ***!
  \*********************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataTransformService: function() { return /* binding */ DataTransformService; }\n/* harmony export */ });\n/**\n * Data Transformation Service\n * \n * Handles data transformation between API and UI formats.\n * \n * @fileoverview Data transformation utilities\n * @author Mental Health Journal App\n * @version 1.0.0\n */ class DataTransformService {\n    /**\n   * Transform API mood entry to UI format\n   */ static transformMoodEntry(apiEntry) {\n        return {\n            id: apiEntry.id,\n            userId: apiEntry.userId,\n            rating: apiEntry.rating,\n            notes: apiEntry.notes,\n            date: apiEntry.date,\n            entryDate: apiEntry.entryDate || apiEntry.date,\n            createdAt: apiEntry.createdAt,\n            updatedAt: apiEntry.updatedAt,\n            status: apiEntry.status,\n            tags: apiEntry.tags,\n            metadata: apiEntry.metadata\n        };\n    }\n    /**\n   * Transform UI mood entry to API format\n   */ static transformMoodEntryToApi(uiEntry) {\n        return {\n            id: uiEntry.id,\n            userId: uiEntry.userId,\n            rating: uiEntry.rating,\n            notes: uiEntry.notes,\n            date: uiEntry.date,\n            createdAt: uiEntry.createdAt,\n            updatedAt: uiEntry.updatedAt,\n            status: uiEntry.status,\n            tags: uiEntry.tags,\n            metadata: uiEntry.metadata\n        };\n    }\n    /**\n   * Transform API user to UI format\n   */ static transformUser(apiUser) {\n        return {\n            id: apiUser.id,\n            email: apiUser.email,\n            username: apiUser.username,\n            preferences: apiUser.preferences,\n            createdAt: apiUser.createdAt,\n            updatedAt: apiUser.updatedAt\n        };\n    }\n    /**\n   * Transform UI user to API format\n   */ static transformUserToApi(uiUser) {\n        return {\n            id: uiUser.id,\n            email: uiUser.email,\n            username: uiUser.username,\n            preferences: uiUser.preferences,\n            createdAt: uiUser.createdAt,\n            updatedAt: uiUser.updatedAt\n        };\n    }\n    /**\n   * Transform API mood trend to UI format\n   */ static transformMoodTrend(apiTrend) {\n        return {\n            id: apiTrend.id,\n            userId: apiTrend.userId,\n            period: apiTrend.period,\n            startDate: apiTrend.startDate,\n            endDate: apiTrend.endDate,\n            statistics: apiTrend.statistics,\n            dataPoints: apiTrend.dataPoints,\n            insights: apiTrend.insights,\n            createdAt: apiTrend.createdAt\n        };\n    }\n    /**\n   * Transform multiple API mood entries to UI format\n   */ static transformMoodEntries(apiEntries) {\n        return apiEntries.map((entry)=>this.transformMoodEntry(entry));\n    }\n    /**\n   * Transform multiple API mood trends to UI format\n   */ static transformMoodTrends(apiTrends) {\n        return apiTrends.map((trend)=>this.transformMoodTrend(trend));\n    }\n    /**\n   * Validate API response format - Input validation for mood entries\n   */ static validateApiMoodEntry(data) {\n        return typeof data === \"object\" && data !== null && typeof data.id === \"string\" && typeof data.userId === \"string\" && typeof data.rating === \"number\" && typeof data.date === \"string\" && typeof data.createdAt === \"string\" && typeof data.updatedAt === \"string\" && typeof data.status === \"string\";\n    }\n    /**\n   * Validate API user format\n   */ static validateApiUser(data) {\n        return typeof data === \"object\" && data !== null && typeof data.id === \"string\" && typeof data.email === \"string\" && typeof data.preferences === \"object\" && data.preferences !== null;\n    }\n    /**\n   * Validate API mood trend format\n   */ static validateApiMoodTrend(data) {\n        return typeof data === \"object\" && data !== null && typeof data.id === \"string\" && typeof data.userId === \"string\" && typeof data.period === \"string\" && typeof data.startDate === \"string\" && typeof data.endDate === \"string\" && typeof data.statistics === \"object\" && data.statistics !== null && typeof data.statistics.averageMood === \"number\" && Array.isArray(data.dataPoints) && typeof data.createdAt === \"string\";\n    }\n    /**\n   * Sanitize data for API transmission\n   */ static sanitizeForApi(data) {\n        if (typeof data !== \"object\" || data === null) {\n            return data;\n        }\n        const sanitized = {\n            ...data\n        };\n        // Remove undefined values\n        Object.keys(sanitized).forEach((key)=>{\n            if (sanitized[key] === undefined) {\n                delete sanitized[key];\n            }\n        });\n        // Sanitize strings\n        Object.keys(sanitized).forEach((key)=>{\n            if (typeof sanitized[key] === \"string\") {\n                sanitized[key] = sanitized[key].trim();\n            }\n        });\n        return sanitized;\n    }\n    /**\n   * Normalize data from API\n   */ static normalizeFromApi(data) {\n        if (typeof data !== \"object\" || data === null) {\n            return data;\n        }\n        const normalized = {\n            ...data\n        };\n        // Ensure required fields have default values\n        if (normalized.status === undefined) {\n            normalized.status = \"active\";\n        }\n        if (normalized.tags === undefined) {\n            normalized.tags = [];\n        }\n        if (normalized.metadata === undefined) {\n            normalized.metadata = {};\n        }\n        return normalized;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/mood-api/client/DataTransformService.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/mood-api/client/HttpClient.ts":
/*!***********************************************!*\
  !*** ./src/lib/mood-api/client/HttpClient.ts ***!
  \***********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: function() { return /* binding */ ApiError; },\n/* harmony export */   HttpClient: function() { return /* binding */ HttpClient; }\n/* harmony export */ });\n/**\n * HTTP Client for Mood Tracker API\n * \n * Provides a robust HTTP client with error handling, retry logic, and authentication.\n * \n * @fileoverview Core HTTP client implementation\n * @author Mental Health Journal App\n * @version 1.0.0\n */ class HttpClient {\n    /**\n   * Set authentication token\n   */ setAuthToken(token) {\n        this.authToken = token;\n    }\n    /**\n   * Make HTTP request with retry logic\n   */ async request(config) {\n        const { method, url, data, headers = {}, params } = config;\n        // Build full URL\n        const fullUrl = this.buildUrl(url, params);\n        // Prepare headers\n        const requestHeaders = this.prepareHeaders(headers);\n        // Prepare request options\n        const requestOptions = {\n            method,\n            headers: requestHeaders,\n            signal: AbortSignal.timeout(this.config.timeout)\n        };\n        // Add body for non-GET requests\n        if (data && method !== \"GET\") {\n            requestOptions.body = JSON.stringify(data);\n        }\n        // Execute request with retry logic\n        return this.executeWithRetry(fullUrl, requestOptions);\n    }\n    /**\n   * GET request\n   */ async get(url, params, headers) {\n        return this.request({\n            method: \"GET\",\n            url,\n            params,\n            headers\n        });\n    }\n    /**\n   * POST request\n   */ async post(url, data, headers) {\n        return this.request({\n            method: \"POST\",\n            url,\n            data,\n            headers\n        });\n    }\n    /**\n   * PUT request\n   */ async put(url, data, headers) {\n        return this.request({\n            method: \"PUT\",\n            url,\n            data,\n            headers\n        });\n    }\n    /**\n   * DELETE request\n   */ async delete(url, headers) {\n        return this.request({\n            method: \"DELETE\",\n            url,\n            headers\n        });\n    }\n    /**\n   * PATCH request\n   */ async patch(url, data, headers) {\n        return this.request({\n            method: \"PATCH\",\n            url,\n            data,\n            headers\n        });\n    }\n    /**\n   * Build full URL with query parameters\n   */ buildUrl(url, params) {\n        const fullUrl = url.startsWith(\"http\") ? url : \"\".concat(this.config.baseURL).concat(url);\n        if (!params || Object.keys(params).length === 0) {\n            return fullUrl;\n        }\n        const urlObj = new URL(fullUrl);\n        Object.entries(params).forEach((param)=>{\n            let [key, value] = param;\n            urlObj.searchParams.append(key, value);\n        });\n        return urlObj.toString();\n    }\n    /**\n   * Prepare headers with authentication\n   */ prepareHeaders(customHeaders) {\n        const headers = {\n            ...this.config.headers,\n            ...customHeaders\n        };\n        if (this.authToken) {\n            headers[\"Authorization\"] = \"Bearer \".concat(this.authToken);\n        }\n        return headers;\n    }\n    /**\n   * Execute request with retry logic\n   */ async executeWithRetry(url, options) {\n        let lastError = null;\n        for(let attempt = 0; attempt <= this.config.retries; attempt++){\n            try {\n                const response = await fetch(url, options);\n                if (!response.ok) {\n                    throw new ApiError(\"HTTP \".concat(response.status, \": \").concat(response.statusText), response.status, \"HTTP_ERROR\", {\n                        url,\n                        status: response.status,\n                        statusText: response.statusText\n                    });\n                }\n                const data = await response.json();\n                const responseHeaders = {};\n                response.headers.forEach((value, key)=>{\n                    responseHeaders[key] = value;\n                });\n                return {\n                    data,\n                    status: response.status,\n                    statusText: response.statusText,\n                    headers: responseHeaders\n                };\n            } catch (error) {\n                lastError = error;\n                // Don't retry on certain errors\n                if (this.shouldNotRetry(error)) {\n                    throw error;\n                }\n                // Wait before retry (exponential backoff)\n                if (attempt < this.config.retries) {\n                    const delay = this.config.retryDelay * Math.pow(2, attempt);\n                    await this.sleep(delay);\n                }\n            }\n        }\n        throw lastError || new Error(\"Request failed after all retries\");\n    }\n    /**\n   * Check if error should not be retried\n   */ shouldNotRetry(error) {\n        // Don't retry on 4xx client errors (except 429 - rate limit)\n        if (error instanceof ApiError && error.status) {\n            if (error.status >= 400 && error.status < 500 && error.status !== 429) {\n                return true;\n            }\n        }\n        // Don't retry on network errors that are likely permanent\n        if (error.name === \"AbortError\" || error.name === \"TypeError\") {\n            return true;\n        }\n        return false;\n    }\n    /**\n   * Sleep utility\n   */ sleep(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    constructor(config){\n        this.config = {\n            timeout: 30000,\n            retries: 3,\n            retryDelay: 1000,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            ...config\n        };\n    }\n}\n/**\n * Custom API Error class\n */ class ApiError extends Error {\n    constructor(message, status, code, details){\n        super(message);\n        this.name = \"ApiError\";\n        this.status = status;\n        this.code = code;\n        this.details = details;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/mood-api/client/HttpClient.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/mood-api/client/MoodApiClient.ts":
/*!**************************************************!*\
  !*** ./src/lib/mood-api/client/MoodApiClient.ts ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MoodApiClient: function() { return /* binding */ MoodApiClient; }\n/* harmony export */ });\n/* harmony import */ var _HttpClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HttpClient */ \"(app-pages-browser)/./src/lib/mood-api/client/HttpClient.ts\");\n/**\n * Mood Tracker API Client\n * \n * High-level API client for mood tracking operations with error handling and caching.\n * \n * @fileoverview Main API client implementation\n * @author Mental Health Journal App\n * @version 1.0.0\n */ \nclass MoodApiClient {\n    /**\n   * Set authentication token\n   */ setAuthToken(token) {\n        this.httpClient.setAuthToken(token);\n    }\n    /**\n   * Health check\n   */ async healthCheck() {\n        const response = await this.httpClient.get(\"/health\");\n        return response.data;\n    }\n    /**\n   * Create mood entry\n   */ async createMoodEntry(request) {\n        try {\n            const response = await this.httpClient.post(\"/api/v1/mood-entries\", request);\n            // Transform API response to UI format\n            const entryDate = response.data.entry_date || response.data.date || new Date().toISOString().split(\"T\")[0];\n            const dateOnly = entryDate.split(\"T\")[0];\n            const transformedData = {\n                id: response.data.id.toString(),\n                userId: response.data.user_id,\n                rating: response.data.rating,\n                notes: response.data.notes,\n                date: dateOnly,\n                entryDate: dateOnly,\n                createdAt: response.data.created_at,\n                updatedAt: response.data.updated_at,\n                status: response.data.status,\n                tags: response.data.tags || [],\n                metadata: response.data.metadata || {}\n            };\n            this.invalidateCache(\"mood-entries\");\n            return transformedData;\n        } catch (error) {\n            var _error_response, _error_response_data_error, _error_response_data, _error_response1;\n            // Re-throw with better error message for duplicate entries\n            if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 409 || ((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : (_error_response_data = _error_response1.data) === null || _error_response_data === void 0 ? void 0 : (_error_response_data_error = _error_response_data.error) === null || _error_response_data_error === void 0 ? void 0 : _error_response_data_error.code) === \"DUPLICATE_ENTRY\") {\n                throw new Error(\"DUPLICATE_ENTRY\");\n            }\n            throw error;\n        }\n    }\n    /**\n   * Get mood entry by ID\n   */ async getMoodEntry(id) {\n        const cacheKey = \"mood-entry-\".concat(id);\n        if (this.config.enableCaching && this.isCacheValid(cacheKey)) {\n            return this.cache.get(cacheKey).data;\n        }\n        const response = await this.httpClient.get(\"/api/v1/mood-entries/\".concat(id));\n        // Transform API response to UI format\n        const entryDate = response.data.entry_date || response.data.date || new Date().toISOString().split(\"T\")[0];\n        const dateOnly = entryDate.split(\"T\")[0];\n        const transformedData = {\n            id: response.data.id.toString(),\n            userId: response.data.user_id,\n            rating: response.data.rating,\n            notes: response.data.notes,\n            date: dateOnly,\n            entryDate: dateOnly,\n            createdAt: response.data.created_at,\n            updatedAt: response.data.updated_at,\n            status: response.data.status,\n            tags: response.data.tags || [],\n            metadata: response.data.metadata || {}\n        };\n        if (this.config.enableCaching) {\n            this.cache.set(cacheKey, {\n                data: transformedData,\n                timestamp: Date.now()\n            });\n        }\n        return transformedData;\n    }\n    /**\n   * Get mood entries with filtering\n   */ async getMoodEntries() {\n        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const cacheKey = \"mood-entries-\".concat(JSON.stringify(params));\n        if (this.config.enableCaching && this.isCacheValid(cacheKey)) {\n            return this.cache.get(cacheKey).data;\n        }\n        const queryParams = {};\n        if (params.startDate) queryParams.startDate = params.startDate;\n        if (params.endDate) queryParams.endDate = params.endDate;\n        if (params.limit) queryParams.limit = params.limit.toString();\n        if (params.offset) queryParams.offset = params.offset.toString();\n        if (params.tags) queryParams.tags = params.tags.join(\",\");\n        // API returns { data: ApiMoodEntry[], pagination: {...} }\n        const response = await this.httpClient.get(\"/api/v1/mood-entries\", queryParams);\n        // Transform API response to UI format\n        const transformedData = response.data.data.map((entry)=>{\n            // Handle date conversion safely\n            const entryDate = entry.entry_date || entry.date || new Date().toISOString().split(\"T\")[0];\n            const dateOnly = entryDate.split(\"T\")[0];\n            return {\n                id: entry.id.toString(),\n                userId: entry.user_id,\n                rating: entry.rating,\n                notes: entry.notes,\n                date: dateOnly,\n                entryDate: dateOnly,\n                createdAt: entry.created_at,\n                updatedAt: entry.updated_at,\n                status: entry.status,\n                tags: entry.tags || [],\n                metadata: entry.metadata || {}\n            };\n        });\n        if (this.config.enableCaching) {\n            this.cache.set(cacheKey, {\n                data: transformedData,\n                timestamp: Date.now()\n            });\n        }\n        return transformedData;\n    }\n    /**\n   * Update mood entry\n   */ async updateMoodEntry(id, request) {\n        const response = await this.httpClient.put(\"/api/v1/mood-entries/\".concat(id), request);\n        // Transform API response to UI format\n        const entryDate = response.data.entry_date || response.data.date || new Date().toISOString().split(\"T\")[0];\n        const dateOnly = entryDate.split(\"T\")[0];\n        const transformedData = {\n            id: response.data.id.toString(),\n            userId: response.data.user_id,\n            rating: response.data.rating,\n            notes: response.data.notes,\n            date: dateOnly,\n            entryDate: dateOnly,\n            createdAt: response.data.created_at,\n            updatedAt: response.data.updated_at,\n            status: response.data.status,\n            tags: response.data.tags || [],\n            metadata: response.data.metadata || {}\n        };\n        this.invalidateCache(\"mood-entries\");\n        this.invalidateCache(\"mood-entry-\".concat(id));\n        return transformedData;\n    }\n    /**\n   * Delete mood entry\n   */ async deleteMoodEntry(id) {\n        await this.httpClient.delete(\"/api/v1/mood-entries/\".concat(id));\n        this.invalidateCache(\"mood-entries\");\n        this.cache.delete(\"mood-entry-\".concat(id));\n    }\n    /**\n   * Get mood trends\n   */ async getMoodTrends(params) {\n        const cacheKey = \"mood-trends-\".concat(JSON.stringify(params));\n        if (this.config.enableCaching && this.isCacheValid(cacheKey)) {\n            return this.cache.get(cacheKey).data;\n        }\n        const queryParams = {\n            period: params.period\n        };\n        if (params.startDate) queryParams.startDate = params.startDate;\n        if (params.endDate) queryParams.endDate = params.endDate;\n        const response = await this.httpClient.get(\"/api/v1/mood-trends\", queryParams);\n        if (this.config.enableCaching) {\n            this.cache.set(cacheKey, {\n                data: response.data,\n                timestamp: Date.now()\n            });\n        }\n        return response.data;\n    }\n    /**\n   * Get user profile\n   */ async getUserProfile() {\n        const cacheKey = \"user-profile\"; // Cache key for user profile data\n        if (this.config.enableCaching && this.isCacheValid(cacheKey)) {\n            return this.cache.get(cacheKey).data;\n        }\n        const response = await this.httpClient.get(\"/api/v1/user/profile\");\n        if (this.config.enableCaching) {\n            this.cache.set(cacheKey, {\n                data: response.data,\n                timestamp: Date.now()\n            });\n        }\n        return response.data;\n    }\n    /**\n   * Update user profile\n   */ async updateUserProfile(user) {\n        const response = await this.httpClient.put(\"/api/v1/user/profile\", user);\n        this.cache.delete(\"user-profile\");\n        return response.data;\n    }\n    /**\n   * Get user settings\n   */ async getUserSettings() {\n        const cacheKey = \"user-settings\";\n        if (this.config.enableCaching && this.isCacheValid(cacheKey)) {\n            return this.cache.get(cacheKey).data;\n        }\n        const response = await this.httpClient.get(\"/api/v1/user/settings\");\n        if (this.config.enableCaching) {\n            this.cache.set(cacheKey, {\n                data: response.data,\n                timestamp: Date.now()\n            });\n        }\n        return response.data;\n    }\n    /**\n   * Update user settings\n   */ async updateUserSettings(settings) {\n        const response = await this.httpClient.put(\"/api/v1/user/settings\", settings);\n        this.cache.delete(\"user-settings\");\n        return response.data;\n    }\n    /**\n   * Sync data with cloud\n   */ async syncData() {\n        const response = await this.httpClient.post(\"/api/v1/sync\");\n        this.invalidateCache(\"mood-entries\");\n        this.invalidateCache(\"mood-trends\");\n        return response.data;\n    }\n    /**\n   * Get API statistics\n   */ async getStats() {\n        const cacheKey = \"api-stats\";\n        if (this.config.enableCaching && this.isCacheValid(cacheKey)) {\n            return this.cache.get(cacheKey).data;\n        }\n        const response = await this.httpClient.get(\"/api/v1/stats\");\n        if (this.config.enableCaching) {\n            this.cache.set(cacheKey, {\n                data: response.data,\n                timestamp: Date.now()\n            });\n        }\n        return response.data;\n    }\n    /**\n   * Export user data\n   */ async exportData() {\n        let format = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"json\";\n        const response = await this.httpClient.get(\"/api/v1/export?format=\".concat(format), undefined, {\n            \"Accept\": format === \"json\" ? \"application/json\" : \"text/csv\"\n        });\n        return new Blob([\n            JSON.stringify(response.data)\n        ], {\n            type: format === \"json\" ? \"application/json\" : \"text/csv\"\n        });\n    }\n    /**\n   * Import user data\n   */ async importData(file) {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        const response = await this.httpClient.post(\"/api/v1/import\", formData, {\n            \"Content-Type\": \"multipart/form-data\"\n        });\n        return response.data;\n    }\n    /**\n   * Check if cache entry is valid\n   */ isCacheValid(key) {\n        if (!this.config.enableCaching) return false;\n        const entry = this.cache.get(key);\n        if (!entry) return false;\n        return Date.now() - entry.timestamp < this.config.cacheTimeout;\n    }\n    /**\n   * Invalidate cache entries matching pattern\n   */ invalidateCache(pattern) {\n        if (!this.config.enableCaching) return;\n        for (const key of this.cache.keys()){\n            if (key.includes(pattern)) {\n                this.cache.delete(key);\n            }\n        }\n    }\n    /**\n   * Clear all cache\n   */ clearCache() {\n        this.cache.clear();\n    }\n    /**\n   * Get cache statistics\n   */ getCacheStats() {\n        return {\n            size: this.cache.size,\n            keys: Array.from(this.cache.keys())\n        };\n    }\n    constructor(config){\n        this.cache = new Map();\n        this.config = {\n            enableCaching: true,\n            cacheTimeout: 300000,\n            ...config\n        };\n        this.httpClient = new _HttpClient__WEBPACK_IMPORTED_MODULE_0__.HttpClient(config);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/mood-api/client/MoodApiClient.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/mood-api/client/OfflineSyncService.ts":
/*!*******************************************************!*\
  !*** ./src/lib/mood-api/client/OfflineSyncService.ts ***!
  \*******************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OfflineSyncService: function() { return /* binding */ OfflineSyncService; }\n/* harmony export */ });\n/**\n * Offline Sync Service\n * \n * Handles offline data synchronization and conflict resolution.\n * \n * @fileoverview Offline synchronization service\n * @author Mental Health Journal App\n * @version 1.0.0\n */ class OfflineSyncService {\n    /**\n   * Add operation to sync queue\n   */ addToSyncQueue(type, entityType, entityId, data) {\n        const operation = {\n            id: this.generateOperationId(),\n            type,\n            entityType,\n            entityId,\n            data,\n            timestamp: Date.now(),\n            retryCount: 0,\n            maxRetries: 3\n        };\n        this.syncQueue.set(operation.id, operation);\n        this.saveSyncQueue();\n        // Try to sync immediately if online\n        if (this.isOnline) {\n            this.syncOperation(operation).catch(console.error);\n        }\n    }\n    /**\n   * Sync all pending operations\n   */ async syncAll() {\n        const startTime = Date.now();\n        const result = {\n            success: true,\n            localToCloud: 0,\n            cloudToLocal: 0,\n            errors: [],\n            duration: 0,\n            operations: []\n        };\n        try {\n            // Sync local to cloud\n            const localToCloudResult = await this.syncLocalToCloud();\n            result.localToCloud = localToCloudResult;\n            // Sync cloud to local\n            const cloudToLocalResult = await this.syncCloudToLocal();\n            result.cloudToLocal = cloudToLocalResult;\n            result.success = result.errors.length === 0;\n        } catch (error) {\n            result.success = false;\n            result.errors.push(error instanceof Error ? error.message : \"Unknown error\");\n        } finally{\n            result.duration = Date.now() - startTime;\n            result.operations = Array.from(this.syncQueue.values());\n        }\n        return result;\n    }\n    /**\n   * Sync local changes to cloud\n   */ async syncLocalToCloud() {\n        let syncedCount = 0;\n        const operations = Array.from(this.syncQueue.values());\n        for (const operation of operations){\n            try {\n                await this.syncOperation(operation);\n                syncedCount++;\n            } catch (error) {\n                console.error(\"Failed to sync operation \".concat(operation.id, \":\"), error);\n                operation.retryCount++;\n                if (operation.retryCount >= operation.maxRetries) {\n                    this.syncQueue.delete(operation.id);\n                }\n            }\n        }\n        this.saveSyncQueue();\n        return syncedCount;\n    }\n    /**\n   * Sync cloud changes to local\n   */ async syncCloudToLocal() {\n        try {\n            // Get latest mood entries from API\n            const apiMoods = await this.apiClient.getMoodEntries();\n            const localMoods = await this.localStorage.getAllMoodEntries(\"default-user\");\n            // Find new or updated entries\n            const newEntries = apiMoods.filter((apiMood)=>!localMoods.some((localMood)=>localMood.id === apiMood.id));\n            const updatedEntries = apiMoods.filter((apiMood)=>{\n                const localMood = localMoods.find((localMood)=>localMood.id === apiMood.id);\n                return localMood && new Date(apiMood.updatedAt) > new Date(localMood.updatedAt);\n            });\n            // Save new entries\n            for (const mood of newEntries){\n                await this.localStorage.saveMoodEntry(mood);\n            }\n            // Update existing entries\n            for (const mood of updatedEntries){\n                await this.localStorage.updateMoodEntry(mood.id, mood);\n            }\n            return newEntries.length + updatedEntries.length;\n        } catch (error) {\n            console.error(\"Failed to sync cloud to local:\", error);\n            return 0;\n        }\n    }\n    /**\n   * Sync individual operation\n   */ async syncOperation(operation) {\n        switch(operation.type){\n            case \"create\":\n                await this.syncCreateOperation(operation);\n                break;\n            case \"update\":\n                await this.syncUpdateOperation(operation);\n                break;\n            case \"delete\":\n                await this.syncDeleteOperation(operation);\n                break;\n        }\n        // Remove from queue after successful sync\n        this.syncQueue.delete(operation.id);\n    }\n    /**\n   * Sync create operation\n   */ async syncCreateOperation(operation) {\n        if (operation.entityType === \"mood\") {\n            await this.apiClient.createMoodEntry(operation.data);\n        } else if (operation.entityType === \"user\") {\n            await this.apiClient.updateUserProfile(operation.data);\n        }\n    }\n    /**\n   * Sync update operation\n   */ async syncUpdateOperation(operation) {\n        if (operation.entityType === \"mood\") {\n            await this.apiClient.updateMoodEntry(operation.entityId, operation.data);\n        } else if (operation.entityType === \"user\") {\n            await this.apiClient.updateUserProfile(operation.data);\n        }\n    }\n    /**\n   * Sync delete operation\n   */ async syncDeleteOperation(operation) {\n        if (operation.entityType === \"mood\") {\n            await this.apiClient.deleteMoodEntry(operation.entityId);\n        }\n    }\n    /**\n   * Resolve conflicts between local and remote data\n   */ async resolveConflicts(localData, remoteData) {\n        let strategy = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"merge\";\n        const conflicts = [];\n        const resolvedData = {\n            ...localData\n        };\n        // Find conflicting fields\n        for(const key in remoteData){\n            if (localData[key] !== undefined && localData[key] !== remoteData[key]) {\n                conflicts.push({\n                    field: key,\n                    localValue: localData[key],\n                    remoteValue: remoteData[key],\n                    resolution: strategy\n                });\n                // Apply resolution strategy\n                switch(strategy){\n                    case \"local\":\n                        break;\n                    case \"remote\":\n                        // Use remote value\n                        resolvedData[key] = remoteData[key];\n                        break;\n                    case \"merge\":\n                        // Merge values (custom logic per field)\n                        resolvedData[key] = this.mergeField(key, localData[key], remoteData[key]);\n                        break;\n                }\n            }\n        }\n        return {\n            strategy,\n            resolvedData,\n            conflicts\n        };\n    }\n    /**\n   * Merge field values\n   */ mergeField(field, localValue, remoteValue) {\n        switch(field){\n            case \"notes\":\n                // Concatenate notes\n                return \"\".concat(localValue || \"\", \"\\n---\\n\").concat(remoteValue || \"\").trim();\n            case \"tags\":\n                // Merge arrays\n                return [\n                    ...new Set([\n                        ...localValue || [],\n                        ...remoteValue || []\n                    ])\n                ];\n            case \"metadata\":\n                // Merge objects\n                return {\n                    ...localValue || {},\n                    ...remoteValue || {}\n                };\n            case \"updatedAt\":\n                // Use the more recent timestamp\n                return new Date(localValue) > new Date(remoteValue) ? localValue : remoteValue;\n            default:\n                // Default to remote value\n                return remoteValue;\n        }\n    }\n    /**\n   * Get sync queue status\n   */ getSyncQueueStatus() {\n        const operations = Array.from(this.syncQueue.values());\n        const oldestOperation = operations.reduce((oldest, current)=>current.timestamp < oldest.timestamp ? current : oldest, operations[0] || null);\n        return {\n            pending: operations.length,\n            operations,\n            oldestOperation\n        };\n    }\n    /**\n   * Clear sync queue\n   */ clearSyncQueue() {\n        this.syncQueue.clear();\n        this.saveSyncQueue();\n    }\n    /**\n   * Setup online status listener\n   */ setupOnlineStatusListener() {\n        const updateOnlineStatus = ()=>{\n            this.isOnline = navigator.onLine;\n            if (this.isOnline) {\n                // Try to sync when coming back online\n                this.syncAll().catch(console.error);\n            }\n        };\n        if (true) {\n            window.addEventListener(\"online\", updateOnlineStatus);\n            window.addEventListener(\"offline\", updateOnlineStatus);\n            this.isOnline = navigator.onLine;\n        }\n    }\n    /**\n   * Save sync queue to localStorage\n   */ saveSyncQueue() {\n        try {\n            if (true) {\n                const data = Array.from(this.syncQueue.entries());\n                localStorage.setItem(\"moodtracker-sync-queue\", JSON.stringify(data));\n            }\n        } catch (error) {\n            console.error(\"Failed to save sync queue:\", error);\n        }\n    }\n    /**\n   * Load sync queue from localStorage\n   */ loadSyncQueue() {\n        try {\n            if (true) {\n                const stored = localStorage.getItem(\"moodtracker-sync-queue\");\n                if (stored) {\n                    const data = JSON.parse(stored);\n                    this.syncQueue = new Map(data);\n                }\n            }\n        } catch (error) {\n            console.error(\"Failed to load sync queue:\", error);\n        }\n    }\n    /**\n   * Generate operation ID\n   */ generateOperationId() {\n        return \"op_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n    }\n    /**\n   * Get online status\n   */ isOnlineStatus() {\n        return this.isOnline;\n    }\n    constructor(localStorage1, apiClient){\n        this.syncQueue = new Map();\n        this.isOnline = true;\n        this.localStorage = localStorage1;\n        this.apiClient = apiClient;\n        this.setupOnlineStatusListener();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/mood-api/client/OfflineSyncService.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/mood-api/client/RealtimeService.ts":
/*!****************************************************!*\
  !*** ./src/lib/mood-api/client/RealtimeService.ts ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RealtimeService: function() { return /* binding */ RealtimeService; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/**\n * Real-time Update Service\n * \n * Handles real-time updates for mood data using WebSocket or Server-Sent Events.\n * \n * @fileoverview Real-time update service\n * @author Mental Health Journal App\n * @version 1.0.0\n */ class RealtimeService {\n    /**\n   * Connect to real-time service\n   */ async connect() {\n        if (this.isConnected) {\n            return;\n        }\n        return new Promise((resolve, reject)=>{\n            try {\n                this.ws = new WebSocket(this.config.url);\n                this.ws.onopen = ()=>{\n                    console.log(\"Real-time service connected\");\n                    this.isConnected = true;\n                    this.reconnectAttempts = 0;\n                    this.startHeartbeat();\n                    resolve();\n                };\n                this.ws.onmessage = (event)=>{\n                    this.handleMessage(event);\n                };\n                this.ws.onclose = ()=>{\n                    console.log(\"Real-time service disconnected\");\n                    this.isConnected = false;\n                    this.stopHeartbeat();\n                    this.scheduleReconnect();\n                };\n                this.ws.onerror = (error)=>{\n                    console.error(\"Real-time service error:\", error);\n                    reject(error);\n                };\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n    /**\n   * Disconnect from real-time service\n   */ disconnect() {\n        if (this.ws) {\n            this.ws.close();\n            this.ws = null;\n        }\n        this.isConnected = false;\n        this.stopHeartbeat();\n        this.clearReconnectTimer();\n    }\n    /**\n   * Subscribe to real-time events\n   */ subscribe(type, callback) {\n        const id = this.generateSubscriptionId();\n        const subscription = {\n            id,\n            type,\n            callback,\n            active: true\n        };\n        this.subscriptions.set(id, subscription);\n        // Send subscription message to server\n        if (this.isConnected && this.ws) {\n            this.send({\n                type: \"subscribe\",\n                data: {\n                    type\n                }\n            });\n        }\n        return id;\n    }\n    /**\n   * Unsubscribe from real-time events\n   */ unsubscribe(id) {\n        const subscription = this.subscriptions.get(id);\n        if (subscription) {\n            subscription.active = false;\n            this.subscriptions.delete(id);\n            // Send unsubscribe message to server\n            if (this.isConnected && this.ws) {\n                this.send({\n                    type: \"unsubscribe\",\n                    data: {\n                        id\n                    }\n                });\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n   * Subscribe to mood updates\n   */ subscribeToMoodUpdates(callback) {\n        return this.subscribe(\"mood_updated\", (event)=>{\n            callback(event.data);\n        });\n    }\n    /**\n   * Subscribe to mood creation\n   */ subscribeToMoodCreation(callback) {\n        return this.subscribe(\"mood_created\", (event)=>{\n            callback(event.data);\n        });\n    }\n    /**\n   * Subscribe to mood deletion\n   */ subscribeToMoodDeletion(callback) {\n        return this.subscribe(\"mood_deleted\", (event)=>{\n            callback(event.data.id);\n        });\n    }\n    /**\n   * Subscribe to user updates\n   */ subscribeToUserUpdates(callback) {\n        return this.subscribe(\"user_updated\", (event)=>{\n            callback(event.data);\n        });\n    }\n    /**\n   * Subscribe to sync completion\n   */ subscribeToSyncCompletion(callback) {\n        return this.subscribe(\"sync_completed\", (event)=>{\n            callback(event.data);\n        });\n    }\n    /**\n   * Send message to server\n   */ send(message) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify(message));\n        }\n    }\n    /**\n   * Handle incoming messages\n   */ handleMessage(event) {\n        try {\n            const data = JSON.parse(event.data);\n            if (data.type === \"pong\") {\n                // Heartbeat response\n                return;\n            }\n            // Notify subscribers\n            for (const subscription of this.subscriptions.values()){\n                if (subscription.active && subscription.type === data.type) {\n                    subscription.callback(data);\n                }\n            }\n        } catch (error) {\n            console.error(\"Failed to parse real-time message:\", error);\n        }\n    }\n    /**\n   * Start heartbeat\n   */ startHeartbeat() {\n        if (!this.config.enableHeartbeat) {\n            return;\n        }\n        this.heartbeatTimer = setInterval(()=>{\n            if (this.isConnected && this.ws) {\n                this.send({\n                    type: \"ping\"\n                });\n            }\n        }, this.config.heartbeatInterval);\n    }\n    /**\n   * Stop heartbeat\n   */ stopHeartbeat() {\n        if (this.heartbeatTimer) {\n            clearInterval(this.heartbeatTimer);\n            this.heartbeatTimer = null;\n        }\n    }\n    /**\n   * Schedule reconnection\n   */ scheduleReconnect() {\n        if (this.reconnectAttempts >= this.config.maxReconnectAttempts) {\n            console.log(\"Max reconnection attempts reached\");\n            return;\n        }\n        this.reconnectTimer = setTimeout(()=>{\n            this.reconnectAttempts++;\n            console.log(\"Attempting to reconnect (\".concat(this.reconnectAttempts, \"/\").concat(this.config.maxReconnectAttempts, \")\"));\n            this.connect().catch(console.error);\n        }, this.config.reconnectInterval);\n    }\n    /**\n   * Clear reconnect timer\n   */ clearReconnectTimer() {\n        if (this.reconnectTimer) {\n            clearTimeout(this.reconnectTimer);\n            this.reconnectTimer = null;\n        }\n    }\n    /**\n   * Generate subscription ID\n   */ generateSubscriptionId() {\n        return \"sub_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n    }\n    /**\n   * Get connection status\n   */ getConnectionStatus() {\n        return {\n            connected: this.isConnected,\n            reconnectAttempts: this.reconnectAttempts,\n            subscriptions: this.subscriptions.size\n        };\n    }\n    /**\n   * Get active subscriptions\n   */ getActiveSubscriptions() {\n        return Array.from(this.subscriptions.values()).filter((sub)=>sub.active);\n    }\n    /**\n   * Clear all subscriptions\n   */ clearSubscriptions() {\n        this.subscriptions.clear();\n    }\n    constructor(config = {}){\n        this.ws = null;\n        this.subscriptions = new Map();\n        this.reconnectAttempts = 0;\n        this.reconnectTimer = null;\n        this.heartbeatTimer = null;\n        this.isConnected = false;\n        this.config = {\n            url: process.env.NEXT_PUBLIC_WS_URL || \"ws://localhost:3000/ws\",\n            reconnectInterval: 5000,\n            maxReconnectAttempts: 5,\n            heartbeatInterval: 30000,\n            enableHeartbeat: true,\n            ...config\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/mood-api/client/RealtimeService.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/mood-api/client/index.ts":
/*!******************************************!*\
  !*** ./src/lib/mood-api/client/index.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: function() { return /* reexport safe */ _HttpClient__WEBPACK_IMPORTED_MODULE_0__.ApiError; },\n/* harmony export */   CacheService: function() { return /* reexport safe */ _CacheService__WEBPACK_IMPORTED_MODULE_4__.CacheService; },\n/* harmony export */   DataTransformService: function() { return /* reexport safe */ _DataTransformService__WEBPACK_IMPORTED_MODULE_3__.DataTransformService; },\n/* harmony export */   HttpClient: function() { return /* reexport safe */ _HttpClient__WEBPACK_IMPORTED_MODULE_0__.HttpClient; },\n/* harmony export */   MoodApiClient: function() { return /* reexport safe */ _MoodApiClient__WEBPACK_IMPORTED_MODULE_1__.MoodApiClient; },\n/* harmony export */   OfflineSyncService: function() { return /* reexport safe */ _OfflineSyncService__WEBPACK_IMPORTED_MODULE_6__.OfflineSyncService; },\n/* harmony export */   RealtimeService: function() { return /* reexport safe */ _RealtimeService__WEBPACK_IMPORTED_MODULE_5__.RealtimeService; },\n/* harmony export */   useMoodApi: function() { return /* reexport safe */ _useMoodApi__WEBPACK_IMPORTED_MODULE_2__.useMoodApi; }\n/* harmony export */ });\n/* harmony import */ var _HttpClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HttpClient */ \"(app-pages-browser)/./src/lib/mood-api/client/HttpClient.ts\");\n/* harmony import */ var _MoodApiClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MoodApiClient */ \"(app-pages-browser)/./src/lib/mood-api/client/MoodApiClient.ts\");\n/* harmony import */ var _useMoodApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useMoodApi */ \"(app-pages-browser)/./src/lib/mood-api/client/useMoodApi.ts\");\n/* harmony import */ var _DataTransformService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DataTransformService */ \"(app-pages-browser)/./src/lib/mood-api/client/DataTransformService.ts\");\n/* harmony import */ var _CacheService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CacheService */ \"(app-pages-browser)/./src/lib/mood-api/client/CacheService.ts\");\n/* harmony import */ var _RealtimeService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./RealtimeService */ \"(app-pages-browser)/./src/lib/mood-api/client/RealtimeService.ts\");\n/* harmony import */ var _OfflineSyncService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./OfflineSyncService */ \"(app-pages-browser)/./src/lib/mood-api/client/OfflineSyncService.ts\");\n/**\n * Mood Tracker API Client Library\n * \n * Exports all API client components for external use.\n * \n * @fileoverview Main export file for API client library\n * @author Mental Health Journal App\n * @version 1.0.0\n */ \n\n\n\n\n\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvbW9vZC1hcGkvY2xpZW50L2luZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7OztDQVFDLEdBRW1EO0FBQ0o7QUFDTjtBQUNvQjtBQUNoQjtBQUNNO0FBQ00iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2xpYi9tb29kLWFwaS9jbGllbnQvaW5kZXgudHM/YTE0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1vb2QgVHJhY2tlciBBUEkgQ2xpZW50IExpYnJhcnlcbiAqIFxuICogRXhwb3J0cyBhbGwgQVBJIGNsaWVudCBjb21wb25lbnRzIGZvciBleHRlcm5hbCB1c2UuXG4gKiBcbiAqIEBmaWxlb3ZlcnZpZXcgTWFpbiBleHBvcnQgZmlsZSBmb3IgQVBJIGNsaWVudCBsaWJyYXJ5XG4gKiBAYXV0aG9yIE1lbnRhbCBIZWFsdGggSm91cm5hbCBBcHBcbiAqIEB2ZXJzaW9uIDEuMC4wXG4gKi9cblxuZXhwb3J0IHsgSHR0cENsaWVudCwgQXBpRXJyb3IgfSBmcm9tICcuL0h0dHBDbGllbnQnO1xuZXhwb3J0IHsgTW9vZEFwaUNsaWVudCB9IGZyb20gJy4vTW9vZEFwaUNsaWVudCc7XG5leHBvcnQgeyB1c2VNb29kQXBpIH0gZnJvbSAnLi91c2VNb29kQXBpJztcbmV4cG9ydCB7IERhdGFUcmFuc2Zvcm1TZXJ2aWNlIH0gZnJvbSAnLi9EYXRhVHJhbnNmb3JtU2VydmljZSc7XG5leHBvcnQgeyBDYWNoZVNlcnZpY2UgfSBmcm9tICcuL0NhY2hlU2VydmljZSc7XG5leHBvcnQgeyBSZWFsdGltZVNlcnZpY2UgfSBmcm9tICcuL1JlYWx0aW1lU2VydmljZSc7XG5leHBvcnQgeyBPZmZsaW5lU3luY1NlcnZpY2UgfSBmcm9tICcuL09mZmxpbmVTeW5jU2VydmljZSc7XG5cbi8vIFJlLWV4cG9ydCB0eXBlc1xuZXhwb3J0IHR5cGUgeyBcbiAgSHR0cENsaWVudENvbmZpZywgXG4gIFJlcXVlc3RDb25maWcsIFxuICBBcGlSZXNwb25zZSBcbn0gZnJvbSAnLi9IdHRwQ2xpZW50JztcbmV4cG9ydCB0eXBlIHsgXG4gIE1vb2RBcGlDbGllbnRDb25maWcsIFxuICBDcmVhdGVNb29kRW50cnlSZXF1ZXN0LCBcbiAgVXBkYXRlTW9vZEVudHJ5UmVxdWVzdCxcbiAgR2V0TW9vZEVudHJpZXNQYXJhbXMsXG4gIEdldFRyZW5kc1BhcmFtcyxcbiAgU3luY1Jlc3VsdCxcbiAgQXBpU3RhdHNcbn0gZnJvbSAnLi9Nb29kQXBpQ2xpZW50JztcbmV4cG9ydCB0eXBlIHsgXG4gIFVzZU1vb2RBcGlPcHRpb25zLCBcbiAgVXNlTW9vZEFwaVJldHVybiBcbn0gZnJvbSAnLi91c2VNb29kQXBpJztcbmV4cG9ydCB0eXBlIHtcbiAgQXBpTW9vZEVudHJ5LFxuICBBcGlVc2VyLFxuICBBcGlNb29kVHJlbmRcbn0gZnJvbSAnLi9EYXRhVHJhbnNmb3JtU2VydmljZSc7XG5leHBvcnQgdHlwZSB7XG4gIENhY2hlRW50cnksXG4gIENhY2hlQ29uZmlnXG59IGZyb20gJy4vQ2FjaGVTZXJ2aWNlJztcbmV4cG9ydCB0eXBlIHtcbiAgUmVhbHRpbWVDb25maWcsXG4gIFJlYWx0aW1lRXZlbnQsXG4gIFJlYWx0aW1lU3Vic2NyaXB0aW9uXG59IGZyb20gJy4vUmVhbHRpbWVTZXJ2aWNlJztcbmV4cG9ydCB0eXBlIHtcbiAgU3luY09wZXJhdGlvbixcbiAgQ29uZmxpY3RSZXNvbHV0aW9uLFxuICBDb25mbGljdFxufSBmcm9tICcuL09mZmxpbmVTeW5jU2VydmljZSc7XG5leHBvcnQgdHlwZSB7IE1vb2RFbnRyeSwgVXNlciwgTW9vZFRyZW5kIH0gZnJvbSAnLi4vLi4vbW9vZC1jb3JlL21vZGVscyc7XG4iXSwibmFtZXMiOlsiSHR0cENsaWVudCIsIkFwaUVycm9yIiwiTW9vZEFwaUNsaWVudCIsInVzZU1vb2RBcGkiLCJEYXRhVHJhbnNmb3JtU2VydmljZSIsIkNhY2hlU2VydmljZSIsIlJlYWx0aW1lU2VydmljZSIsIk9mZmxpbmVTeW5jU2VydmljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/mood-api/client/index.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/mood-api/client/useMoodApi.ts":
/*!***********************************************!*\
  !*** ./src/lib/mood-api/client/useMoodApi.ts ***!
  \***********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMoodApi: function() { return /* binding */ useMoodApi; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _MoodApiClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MoodApiClient */ \"(app-pages-browser)/./src/lib/mood-api/client/MoodApiClient.ts\");\n/**\n * React Hook for Mood API Client\n * \n * Provides React hooks for using the Mood API client with state management.\n * \n * @fileoverview React hooks for API integration\n * @author Mental Health Journal App\n * @version 1.0.0\n */ \n\nfunction useMoodApi(options) {\n    const { config, autoSync = true, syncInterval = 300000 } = options; // 5 minutes default\n    // Initialize API client\n    const client = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new _MoodApiClient__WEBPACK_IMPORTED_MODULE_1__.MoodApiClient(config), [\n        config\n    ]);\n    // State\n    const [isConnected, setIsConnected] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [lastSync, setLastSync] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Data state\n    const [moodEntries, setMoodEntries] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [moodTrends, setMoodTrends] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [stats, setStats] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Error handler\n    const handleError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((err)=>{\n        console.error(\"Mood API Error:\", err);\n        setError(err.message || \"An error occurred\");\n        setIsLoading(false);\n    }, []);\n    // Clear error\n    const clearError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setError(null);\n    }, []);\n    // Health check\n    const checkConnection = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        try {\n            await client.healthCheck();\n            setIsConnected(true);\n            setError(null);\n        } catch (err) {\n            setIsConnected(false);\n            handleError(err);\n        }\n    }, [\n        client,\n        handleError\n    ]);\n    // Load mood entries\n    const refreshMoodEntries = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (params)=>{\n        try {\n            setIsLoading(true);\n            clearError();\n            const entries = await client.getMoodEntries(params);\n            setMoodEntries(entries);\n        } catch (err) {\n            handleError(err);\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        client,\n        handleError,\n        clearError\n    ]);\n    // Create mood entry\n    const createMoodEntry = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (request)=>{\n        try {\n            setIsLoading(true);\n            clearError();\n            const entry = await client.createMoodEntry(request);\n            setMoodEntries((prev)=>[\n                    entry,\n                    ...prev\n                ]);\n            return entry;\n        } catch (err) {\n            handleError(err);\n            throw err;\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        client,\n        handleError,\n        clearError\n    ]);\n    // Update mood entry\n    const updateMoodEntry = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (id, request)=>{\n        try {\n            setIsLoading(true);\n            clearError();\n            const entry = await client.updateMoodEntry(id, request);\n            setMoodEntries((prev)=>prev.map((e)=>e.id === id ? entry : e));\n            return entry;\n        } catch (err) {\n            handleError(err);\n            throw err;\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        client,\n        handleError,\n        clearError\n    ]);\n    // Delete mood entry\n    const deleteMoodEntry = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (id)=>{\n        try {\n            setIsLoading(true);\n            clearError();\n            await client.deleteMoodEntry(id);\n            setMoodEntries((prev)=>prev.filter((e)=>e.id !== id));\n        } catch (err) {\n            handleError(err);\n            throw err;\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        client,\n        handleError,\n        clearError\n    ]);\n    // Get mood trends\n    const getMoodTrends = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (params)=>{\n        try {\n            setIsLoading(true);\n            clearError();\n            const trends = await client.getMoodTrends(params);\n            setMoodTrends(trends);\n        } catch (err) {\n            handleError(err);\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        client,\n        handleError,\n        clearError\n    ]);\n    // Update user\n    const updateUser = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (userData)=>{\n        try {\n            setIsLoading(true);\n            clearError();\n            const updatedUser = await client.updateUserProfile(userData);\n            setUser(updatedUser);\n            return updatedUser;\n        } catch (err) {\n            handleError(err);\n            throw err;\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        client,\n        handleError,\n        clearError\n    ]);\n    // Update user settings\n    const updateUserSettings = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (settings)=>{\n        try {\n            setIsLoading(true);\n            clearError();\n            const updatedUser = await client.updateUserSettings(settings);\n            setUser(updatedUser);\n            return updatedUser;\n        } catch (err) {\n            handleError(err);\n            throw err;\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        client,\n        handleError,\n        clearError\n    ]);\n    // Sync data\n    const syncData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        try {\n            setIsLoading(true);\n            clearError();\n            const result = await client.syncData();\n            setLastSync(new Date());\n            // Refresh data after sync\n            await Promise.all([\n                refreshMoodEntries(),\n                refreshStats()\n            ]);\n            return result;\n        } catch (err) {\n            handleError(err);\n            throw err;\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        client,\n        handleError,\n        clearError,\n        refreshMoodEntries\n    ]);\n    // Refresh stats\n    const refreshStats = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        try {\n            const statsData = await client.getStats();\n            setStats(statsData);\n        } catch (err) {\n            console.warn(\"Failed to load stats:\", err);\n        }\n    }, [\n        client\n    ]);\n    // Clear cache\n    const clearCache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        client.clearCache();\n    }, [\n        client\n    ]);\n    // Initialize on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        checkConnection();\n        refreshMoodEntries();\n        refreshStats();\n    }, [\n        checkConnection,\n        refreshMoodEntries,\n        refreshStats\n    ]);\n    // Auto-sync setup\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!autoSync) return;\n        const interval = setInterval(()=>{\n            if (isConnected) {\n                syncData().catch(console.warn);\n            }\n        }, syncInterval);\n        return ()=>clearInterval(interval);\n    }, [\n        autoSync,\n        syncInterval,\n        isConnected,\n        syncData\n    ]);\n    return {\n        client,\n        isConnected,\n        isLoading,\n        error,\n        lastSync,\n        moodEntries,\n        createMoodEntry,\n        updateMoodEntry,\n        deleteMoodEntry,\n        refreshMoodEntries,\n        moodTrends,\n        getMoodTrends,\n        user,\n        updateUser,\n        updateUserSettings,\n        syncData,\n        stats,\n        refreshStats,\n        clearCache\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvbW9vZC1hcGkvY2xpZW50L3VzZU1vb2RBcGkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7OztDQVFDLEdBRWlFO0FBQ2dIO0FBOEMzSyxTQUFTSyxXQUFXQyxPQUEwQjtJQUNuRCxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsV0FBVyxJQUFJLEVBQUVDLGVBQWUsTUFBTSxFQUFFLEdBQUdILFNBQVMsb0JBQW9CO0lBRXhGLHdCQUF3QjtJQUN4QixNQUFNSSxTQUFTUCw4Q0FBT0EsQ0FBQyxJQUFNLElBQUlDLHlEQUFhQSxDQUFDRyxTQUFTO1FBQUNBO0tBQU87SUFFaEUsUUFBUTtJQUNSLE1BQU0sQ0FBQ0ksYUFBYUMsZUFBZSxHQUFHWiwrQ0FBUUEsQ0FBQztJQUMvQyxNQUFNLENBQUNhLFdBQVdDLGFBQWEsR0FBR2QsK0NBQVFBLENBQUM7SUFDM0MsTUFBTSxDQUFDZSxPQUFPQyxTQUFTLEdBQUdoQiwrQ0FBUUEsQ0FBZ0I7SUFDbEQsTUFBTSxDQUFDaUIsVUFBVUMsWUFBWSxHQUFHbEIsK0NBQVFBLENBQWM7SUFFdEQsYUFBYTtJQUNiLE1BQU0sQ0FBQ21CLGFBQWFDLGVBQWUsR0FBR3BCLCtDQUFRQSxDQUFjLEVBQUU7SUFDOUQsTUFBTSxDQUFDcUIsWUFBWUMsY0FBYyxHQUFHdEIsK0NBQVFBLENBQWMsRUFBRTtJQUM1RCxNQUFNLENBQUN1QixNQUFNQyxRQUFRLEdBQUd4QiwrQ0FBUUEsQ0FBYztJQUM5QyxNQUFNLENBQUN5QixPQUFPQyxTQUFTLEdBQUcxQiwrQ0FBUUEsQ0FBa0I7SUFFcEQsZ0JBQWdCO0lBQ2hCLE1BQU0yQixjQUFjekIsa0RBQVdBLENBQUMsQ0FBQzBCO1FBQy9CQyxRQUFRZCxLQUFLLENBQUMsbUJBQW1CYTtRQUNqQ1osU0FBU1ksSUFBSUUsT0FBTyxJQUFJO1FBQ3hCaEIsYUFBYTtJQUNmLEdBQUcsRUFBRTtJQUVMLGNBQWM7SUFDZCxNQUFNaUIsYUFBYTdCLGtEQUFXQSxDQUFDO1FBQzdCYyxTQUFTO0lBQ1gsR0FBRyxFQUFFO0lBRUwsZUFBZTtJQUNmLE1BQU1nQixrQkFBa0I5QixrREFBV0EsQ0FBQztRQUNsQyxJQUFJO1lBQ0YsTUFBTVEsT0FBT3VCLFdBQVc7WUFDeEJyQixlQUFlO1lBQ2ZJLFNBQVM7UUFDWCxFQUFFLE9BQU9ZLEtBQUs7WUFDWmhCLGVBQWU7WUFDZmUsWUFBWUM7UUFDZDtJQUNGLEdBQUc7UUFBQ2xCO1FBQVFpQjtLQUFZO0lBRXhCLG9CQUFvQjtJQUNwQixNQUFNTyxxQkFBcUJoQyxrREFBV0EsQ0FBQyxPQUFPaUM7UUFDNUMsSUFBSTtZQUNGckIsYUFBYTtZQUNiaUI7WUFDQSxNQUFNSyxVQUFVLE1BQU0xQixPQUFPMkIsY0FBYyxDQUFDRjtZQUM1Q2YsZUFBZWdCO1FBQ2pCLEVBQUUsT0FBT1IsS0FBSztZQUNaRCxZQUFZQztRQUNkLFNBQVU7WUFDUmQsYUFBYTtRQUNmO0lBQ0YsR0FBRztRQUFDSjtRQUFRaUI7UUFBYUk7S0FBVztJQUVwQyxvQkFBb0I7SUFDcEIsTUFBTU8sa0JBQWtCcEMsa0RBQVdBLENBQUMsT0FBT3FDO1FBQ3pDLElBQUk7WUFDRnpCLGFBQWE7WUFDYmlCO1lBQ0EsTUFBTVMsUUFBUSxNQUFNOUIsT0FBTzRCLGVBQWUsQ0FBQ0M7WUFDM0NuQixlQUFlcUIsQ0FBQUEsT0FBUTtvQkFBQ0Q7dUJBQVVDO2lCQUFLO1lBQ3ZDLE9BQU9EO1FBQ1QsRUFBRSxPQUFPWixLQUFLO1lBQ1pELFlBQVlDO1lBQ1osTUFBTUE7UUFDUixTQUFVO1lBQ1JkLGFBQWE7UUFDZjtJQUNGLEdBQUc7UUFBQ0o7UUFBUWlCO1FBQWFJO0tBQVc7SUFFcEMsb0JBQW9CO0lBQ3BCLE1BQU1XLGtCQUFrQnhDLGtEQUFXQSxDQUFDLE9BQU95QyxJQUFZSjtRQUNyRCxJQUFJO1lBQ0Z6QixhQUFhO1lBQ2JpQjtZQUNBLE1BQU1TLFFBQVEsTUFBTTlCLE9BQU9nQyxlQUFlLENBQUNDLElBQUlKO1lBQy9DbkIsZUFBZXFCLENBQUFBLE9BQVFBLEtBQUtHLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUYsRUFBRSxLQUFLQSxLQUFLSCxRQUFRSztZQUMzRCxPQUFPTDtRQUNULEVBQUUsT0FBT1osS0FBSztZQUNaRCxZQUFZQztZQUNaLE1BQU1BO1FBQ1IsU0FBVTtZQUNSZCxhQUFhO1FBQ2Y7SUFDRixHQUFHO1FBQUNKO1FBQVFpQjtRQUFhSTtLQUFXO0lBRXBDLG9CQUFvQjtJQUNwQixNQUFNZSxrQkFBa0I1QyxrREFBV0EsQ0FBQyxPQUFPeUM7UUFDekMsSUFBSTtZQUNGN0IsYUFBYTtZQUNiaUI7WUFDQSxNQUFNckIsT0FBT29DLGVBQWUsQ0FBQ0g7WUFDN0J2QixlQUFlcUIsQ0FBQUEsT0FBUUEsS0FBS00sTUFBTSxDQUFDRixDQUFBQSxJQUFLQSxFQUFFRixFQUFFLEtBQUtBO1FBQ25ELEVBQUUsT0FBT2YsS0FBSztZQUNaRCxZQUFZQztZQUNaLE1BQU1BO1FBQ1IsU0FBVTtZQUNSZCxhQUFhO1FBQ2Y7SUFDRixHQUFHO1FBQUNKO1FBQVFpQjtRQUFhSTtLQUFXO0lBRXBDLGtCQUFrQjtJQUNsQixNQUFNaUIsZ0JBQWdCOUMsa0RBQVdBLENBQUMsT0FBT2lDO1FBQ3ZDLElBQUk7WUFDRnJCLGFBQWE7WUFDYmlCO1lBQ0EsTUFBTWtCLFNBQVMsTUFBTXZDLE9BQU9zQyxhQUFhLENBQUNiO1lBQzFDYixjQUFjMkI7UUFDaEIsRUFBRSxPQUFPckIsS0FBSztZQUNaRCxZQUFZQztRQUNkLFNBQVU7WUFDUmQsYUFBYTtRQUNmO0lBQ0YsR0FBRztRQUFDSjtRQUFRaUI7UUFBYUk7S0FBVztJQUVwQyxjQUFjO0lBQ2QsTUFBTW1CLGFBQWFoRCxrREFBV0EsQ0FBQyxPQUFPaUQ7UUFDcEMsSUFBSTtZQUNGckMsYUFBYTtZQUNiaUI7WUFDQSxNQUFNcUIsY0FBYyxNQUFNMUMsT0FBTzJDLGlCQUFpQixDQUFDRjtZQUNuRDNCLFFBQVE0QjtZQUNSLE9BQU9BO1FBQ1QsRUFBRSxPQUFPeEIsS0FBSztZQUNaRCxZQUFZQztZQUNaLE1BQU1BO1FBQ1IsU0FBVTtZQUNSZCxhQUFhO1FBQ2Y7SUFDRixHQUFHO1FBQUNKO1FBQVFpQjtRQUFhSTtLQUFXO0lBRXBDLHVCQUF1QjtJQUN2QixNQUFNdUIscUJBQXFCcEQsa0RBQVdBLENBQUMsT0FBT3FEO1FBQzVDLElBQUk7WUFDRnpDLGFBQWE7WUFDYmlCO1lBQ0EsTUFBTXFCLGNBQWMsTUFBTTFDLE9BQU80QyxrQkFBa0IsQ0FBQ0M7WUFDcEQvQixRQUFRNEI7WUFDUixPQUFPQTtRQUNULEVBQUUsT0FBT3hCLEtBQUs7WUFDWkQsWUFBWUM7WUFDWixNQUFNQTtRQUNSLFNBQVU7WUFDUmQsYUFBYTtRQUNmO0lBQ0YsR0FBRztRQUFDSjtRQUFRaUI7UUFBYUk7S0FBVztJQUVwQyxZQUFZO0lBQ1osTUFBTXlCLFdBQVd0RCxrREFBV0EsQ0FBQztRQUMzQixJQUFJO1lBQ0ZZLGFBQWE7WUFDYmlCO1lBQ0EsTUFBTTBCLFNBQVMsTUFBTS9DLE9BQU84QyxRQUFRO1lBQ3BDdEMsWUFBWSxJQUFJd0M7WUFFaEIsMEJBQTBCO1lBQzFCLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQztnQkFDaEIxQjtnQkFDQTJCO2FBQ0Q7WUFFRCxPQUFPSjtRQUNULEVBQUUsT0FBTzdCLEtBQUs7WUFDWkQsWUFBWUM7WUFDWixNQUFNQTtRQUNSLFNBQVU7WUFDUmQsYUFBYTtRQUNmO0lBQ0YsR0FBRztRQUFDSjtRQUFRaUI7UUFBYUk7UUFBWUc7S0FBbUI7SUFFeEQsZ0JBQWdCO0lBQ2hCLE1BQU0yQixlQUFlM0Qsa0RBQVdBLENBQUM7UUFDL0IsSUFBSTtZQUNGLE1BQU00RCxZQUFZLE1BQU1wRCxPQUFPcUQsUUFBUTtZQUN2Q3JDLFNBQVNvQztRQUNYLEVBQUUsT0FBT2xDLEtBQUs7WUFDWkMsUUFBUW1DLElBQUksQ0FBQyx5QkFBeUJwQztRQUN4QztJQUNGLEdBQUc7UUFBQ2xCO0tBQU87SUFFWCxjQUFjO0lBQ2QsTUFBTXVELGFBQWEvRCxrREFBV0EsQ0FBQztRQUM3QlEsT0FBT3VELFVBQVU7SUFDbkIsR0FBRztRQUFDdkQ7S0FBTztJQUVYLHNCQUFzQjtJQUN0QlQsZ0RBQVNBLENBQUM7UUFDUitCO1FBQ0FFO1FBQ0EyQjtJQUNGLEdBQUc7UUFBQzdCO1FBQWlCRTtRQUFvQjJCO0tBQWE7SUFFdEQsa0JBQWtCO0lBQ2xCNUQsZ0RBQVNBLENBQUM7UUFDUixJQUFJLENBQUNPLFVBQVU7UUFFZixNQUFNMEQsV0FBV0MsWUFBWTtZQUMzQixJQUFJeEQsYUFBYTtnQkFDZjZDLFdBQVdZLEtBQUssQ0FBQ3ZDLFFBQVFtQyxJQUFJO1lBQy9CO1FBQ0YsR0FBR3ZEO1FBRUgsT0FBTyxJQUFNNEQsY0FBY0g7SUFDN0IsR0FBRztRQUFDMUQ7UUFBVUM7UUFBY0U7UUFBYTZDO0tBQVM7SUFFbEQsT0FBTztRQUNMOUM7UUFDQUM7UUFDQUU7UUFDQUU7UUFDQUU7UUFDQUU7UUFDQW1CO1FBQ0FJO1FBQ0FJO1FBQ0FaO1FBQ0FiO1FBQ0EyQjtRQUNBekI7UUFDQTJCO1FBQ0FJO1FBQ0FFO1FBQ0EvQjtRQUNBb0M7UUFDQUk7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9saWIvbW9vZC1hcGkvY2xpZW50L3VzZU1vb2RBcGkudHM/N2M4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlYWN0IEhvb2sgZm9yIE1vb2QgQVBJIENsaWVudFxuICogXG4gKiBQcm92aWRlcyBSZWFjdCBob29rcyBmb3IgdXNpbmcgdGhlIE1vb2QgQVBJIGNsaWVudCB3aXRoIHN0YXRlIG1hbmFnZW1lbnQuXG4gKiBcbiAqIEBmaWxlb3ZlcnZpZXcgUmVhY3QgaG9va3MgZm9yIEFQSSBpbnRlZ3JhdGlvblxuICogQGF1dGhvciBNZW50YWwgSGVhbHRoIEpvdXJuYWwgQXBwXG4gKiBAdmVyc2lvbiAxLjAuMFxuICovXG5cbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTW9vZEFwaUNsaWVudCwgTW9vZEFwaUNsaWVudENvbmZpZywgQ3JlYXRlTW9vZEVudHJ5UmVxdWVzdCwgVXBkYXRlTW9vZEVudHJ5UmVxdWVzdCwgR2V0TW9vZEVudHJpZXNQYXJhbXMsIEdldFRyZW5kc1BhcmFtcywgU3luY1Jlc3VsdCwgQXBpU3RhdHMgfSBmcm9tICcuL01vb2RBcGlDbGllbnQnO1xuaW1wb3J0IHsgTW9vZEVudHJ5LCBVc2VyLCBNb29kVHJlbmQgfSBmcm9tICcuLi8uLi9tb29kLWNvcmUvbW9kZWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBVc2VNb29kQXBpT3B0aW9ucyB7XG4gIGNvbmZpZzogTW9vZEFwaUNsaWVudENvbmZpZztcbiAgYXV0b1N5bmM/OiBib29sZWFuO1xuICBzeW5jSW50ZXJ2YWw/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlTW9vZEFwaVJldHVybiB7XG4gIC8vIENsaWVudCBpbnN0YW5jZVxuICBjbGllbnQ6IE1vb2RBcGlDbGllbnQ7XG4gIFxuICAvLyBTdGF0ZVxuICBpc0Nvbm5lY3RlZDogYm9vbGVhbjtcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xuICBlcnJvcjogc3RyaW5nIHwgbnVsbDtcbiAgbGFzdFN5bmM6IERhdGUgfCBudWxsO1xuICBcbiAgLy8gTW9vZCBlbnRyaWVzXG4gIG1vb2RFbnRyaWVzOiBNb29kRW50cnlbXTtcbiAgY3JlYXRlTW9vZEVudHJ5OiAocmVxdWVzdDogQ3JlYXRlTW9vZEVudHJ5UmVxdWVzdCkgPT4gUHJvbWlzZTxNb29kRW50cnk+O1xuICB1cGRhdGVNb29kRW50cnk6IChpZDogc3RyaW5nLCByZXF1ZXN0OiBVcGRhdGVNb29kRW50cnlSZXF1ZXN0KSA9PiBQcm9taXNlPE1vb2RFbnRyeT47XG4gIGRlbGV0ZU1vb2RFbnRyeTogKGlkOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD47XG4gIHJlZnJlc2hNb29kRW50cmllczogKHBhcmFtcz86IEdldE1vb2RFbnRyaWVzUGFyYW1zKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBcbiAgLy8gVHJlbmRzXG4gIG1vb2RUcmVuZHM6IE1vb2RUcmVuZFtdO1xuICBnZXRNb29kVHJlbmRzOiAocGFyYW1zOiBHZXRUcmVuZHNQYXJhbXMpID0+IFByb21pc2U8dm9pZD47XG4gIFxuICAvLyBVc2VyXG4gIHVzZXI6IFVzZXIgfCBudWxsO1xuICB1cGRhdGVVc2VyOiAodXNlcjogUGFydGlhbDxVc2VyPikgPT4gUHJvbWlzZTxVc2VyPjtcbiAgdXBkYXRlVXNlclNldHRpbmdzOiAoc2V0dGluZ3M6IFBhcnRpYWw8VXNlcj4pID0+IFByb21pc2U8VXNlcj47XG4gIFxuICAvLyBTeW5jXG4gIHN5bmNEYXRhOiAoKSA9PiBQcm9taXNlPFN5bmNSZXN1bHQ+O1xuICBcbiAgLy8gU3RhdHNcbiAgc3RhdHM6IEFwaVN0YXRzIHwgbnVsbDtcbiAgcmVmcmVzaFN0YXRzOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBcbiAgLy8gQ2FjaGVcbiAgY2xlYXJDYWNoZTogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZU1vb2RBcGkob3B0aW9uczogVXNlTW9vZEFwaU9wdGlvbnMpOiBVc2VNb29kQXBpUmV0dXJuIHtcbiAgY29uc3QgeyBjb25maWcsIGF1dG9TeW5jID0gdHJ1ZSwgc3luY0ludGVydmFsID0gMzAwMDAwIH0gPSBvcHRpb25zOyAvLyA1IG1pbnV0ZXMgZGVmYXVsdFxuICBcbiAgLy8gSW5pdGlhbGl6ZSBBUEkgY2xpZW50XG4gIGNvbnN0IGNsaWVudCA9IHVzZU1lbW8oKCkgPT4gbmV3IE1vb2RBcGlDbGllbnQoY29uZmlnKSwgW2NvbmZpZ10pO1xuICBcbiAgLy8gU3RhdGVcbiAgY29uc3QgW2lzQ29ubmVjdGVkLCBzZXRJc0Nvbm5lY3RlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtsYXN0U3luYywgc2V0TGFzdFN5bmNdID0gdXNlU3RhdGU8RGF0ZSB8IG51bGw+KG51bGwpO1xuICBcbiAgLy8gRGF0YSBzdGF0ZVxuICBjb25zdCBbbW9vZEVudHJpZXMsIHNldE1vb2RFbnRyaWVzXSA9IHVzZVN0YXRlPE1vb2RFbnRyeVtdPihbXSk7XG4gIGNvbnN0IFttb29kVHJlbmRzLCBzZXRNb29kVHJlbmRzXSA9IHVzZVN0YXRlPE1vb2RUcmVuZFtdPihbXSk7XG4gIGNvbnN0IFt1c2VyLCBzZXRVc2VyXSA9IHVzZVN0YXRlPFVzZXIgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW3N0YXRzLCBzZXRTdGF0c10gPSB1c2VTdGF0ZTxBcGlTdGF0cyB8IG51bGw+KG51bGwpO1xuICBcbiAgLy8gRXJyb3IgaGFuZGxlclxuICBjb25zdCBoYW5kbGVFcnJvciA9IHVzZUNhbGxiYWNrKChlcnI6IGFueSkgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoJ01vb2QgQVBJIEVycm9yOicsIGVycik7XG4gICAgc2V0RXJyb3IoZXJyLm1lc3NhZ2UgfHwgJ0FuIGVycm9yIG9jY3VycmVkJyk7XG4gICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgfSwgW10pO1xuICBcbiAgLy8gQ2xlYXIgZXJyb3JcbiAgY29uc3QgY2xlYXJFcnJvciA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRFcnJvcihudWxsKTtcbiAgfSwgW10pO1xuICBcbiAgLy8gSGVhbHRoIGNoZWNrXG4gIGNvbnN0IGNoZWNrQ29ubmVjdGlvbiA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgY2xpZW50LmhlYWx0aENoZWNrKCk7XG4gICAgICBzZXRJc0Nvbm5lY3RlZCh0cnVlKTtcbiAgICAgIHNldEVycm9yKG51bGwpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgc2V0SXNDb25uZWN0ZWQoZmFsc2UpO1xuICAgICAgaGFuZGxlRXJyb3IoZXJyKTtcbiAgICB9XG4gIH0sIFtjbGllbnQsIGhhbmRsZUVycm9yXSk7XG4gIFxuICAvLyBMb2FkIG1vb2QgZW50cmllc1xuICBjb25zdCByZWZyZXNoTW9vZEVudHJpZXMgPSB1c2VDYWxsYmFjayhhc3luYyAocGFyYW1zPzogR2V0TW9vZEVudHJpZXNQYXJhbXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgICAgY2xlYXJFcnJvcigpO1xuICAgICAgY29uc3QgZW50cmllcyA9IGF3YWl0IGNsaWVudC5nZXRNb29kRW50cmllcyhwYXJhbXMpO1xuICAgICAgc2V0TW9vZEVudHJpZXMoZW50cmllcyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2NsaWVudCwgaGFuZGxlRXJyb3IsIGNsZWFyRXJyb3JdKTtcbiAgXG4gIC8vIENyZWF0ZSBtb29kIGVudHJ5XG4gIGNvbnN0IGNyZWF0ZU1vb2RFbnRyeSA9IHVzZUNhbGxiYWNrKGFzeW5jIChyZXF1ZXN0OiBDcmVhdGVNb29kRW50cnlSZXF1ZXN0KTogUHJvbWlzZTxNb29kRW50cnk+ID0+IHtcbiAgICB0cnkge1xuICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgICAgY2xlYXJFcnJvcigpO1xuICAgICAgY29uc3QgZW50cnkgPSBhd2FpdCBjbGllbnQuY3JlYXRlTW9vZEVudHJ5KHJlcXVlc3QpO1xuICAgICAgc2V0TW9vZEVudHJpZXMocHJldiA9PiBbZW50cnksIC4uLnByZXZdKTtcbiAgICAgIHJldHVybiBlbnRyeTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGhhbmRsZUVycm9yKGVycik7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgfVxuICB9LCBbY2xpZW50LCBoYW5kbGVFcnJvciwgY2xlYXJFcnJvcl0pO1xuICBcbiAgLy8gVXBkYXRlIG1vb2QgZW50cnlcbiAgY29uc3QgdXBkYXRlTW9vZEVudHJ5ID0gdXNlQ2FsbGJhY2soYXN5bmMgKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IFVwZGF0ZU1vb2RFbnRyeVJlcXVlc3QpOiBQcm9taXNlPE1vb2RFbnRyeT4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgICBjbGVhckVycm9yKCk7XG4gICAgICBjb25zdCBlbnRyeSA9IGF3YWl0IGNsaWVudC51cGRhdGVNb29kRW50cnkoaWQsIHJlcXVlc3QpO1xuICAgICAgc2V0TW9vZEVudHJpZXMocHJldiA9PiBwcmV2Lm1hcChlID0+IGUuaWQgPT09IGlkID8gZW50cnkgOiBlKSk7XG4gICAgICByZXR1cm4gZW50cnk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlcnIpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2NsaWVudCwgaGFuZGxlRXJyb3IsIGNsZWFyRXJyb3JdKTtcbiAgXG4gIC8vIERlbGV0ZSBtb29kIGVudHJ5XG4gIGNvbnN0IGRlbGV0ZU1vb2RFbnRyeSA9IHVzZUNhbGxiYWNrKGFzeW5jIChpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcbiAgICAgIGNsZWFyRXJyb3IoKTtcbiAgICAgIGF3YWl0IGNsaWVudC5kZWxldGVNb29kRW50cnkoaWQpO1xuICAgICAgc2V0TW9vZEVudHJpZXMocHJldiA9PiBwcmV2LmZpbHRlcihlID0+IGUuaWQgIT09IGlkKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlcnIpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2NsaWVudCwgaGFuZGxlRXJyb3IsIGNsZWFyRXJyb3JdKTtcbiAgXG4gIC8vIEdldCBtb29kIHRyZW5kc1xuICBjb25zdCBnZXRNb29kVHJlbmRzID0gdXNlQ2FsbGJhY2soYXN5bmMgKHBhcmFtczogR2V0VHJlbmRzUGFyYW1zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcbiAgICAgIGNsZWFyRXJyb3IoKTtcbiAgICAgIGNvbnN0IHRyZW5kcyA9IGF3YWl0IGNsaWVudC5nZXRNb29kVHJlbmRzKHBhcmFtcyk7XG4gICAgICBzZXRNb29kVHJlbmRzKHRyZW5kcyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2NsaWVudCwgaGFuZGxlRXJyb3IsIGNsZWFyRXJyb3JdKTtcbiAgXG4gIC8vIFVwZGF0ZSB1c2VyXG4gIGNvbnN0IHVwZGF0ZVVzZXIgPSB1c2VDYWxsYmFjayhhc3luYyAodXNlckRhdGE6IFBhcnRpYWw8VXNlcj4pOiBQcm9taXNlPFVzZXI+ID0+IHtcbiAgICB0cnkge1xuICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgICAgY2xlYXJFcnJvcigpO1xuICAgICAgY29uc3QgdXBkYXRlZFVzZXIgPSBhd2FpdCBjbGllbnQudXBkYXRlVXNlclByb2ZpbGUodXNlckRhdGEpO1xuICAgICAgc2V0VXNlcih1cGRhdGVkVXNlcik7XG4gICAgICByZXR1cm4gdXBkYXRlZFVzZXI7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlcnIpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2NsaWVudCwgaGFuZGxlRXJyb3IsIGNsZWFyRXJyb3JdKTtcbiAgXG4gIC8vIFVwZGF0ZSB1c2VyIHNldHRpbmdzXG4gIGNvbnN0IHVwZGF0ZVVzZXJTZXR0aW5ncyA9IHVzZUNhbGxiYWNrKGFzeW5jIChzZXR0aW5nczogUGFydGlhbDxVc2VyPik6IFByb21pc2U8VXNlcj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgICBjbGVhckVycm9yKCk7XG4gICAgICBjb25zdCB1cGRhdGVkVXNlciA9IGF3YWl0IGNsaWVudC51cGRhdGVVc2VyU2V0dGluZ3Moc2V0dGluZ3MpO1xuICAgICAgc2V0VXNlcih1cGRhdGVkVXNlcik7XG4gICAgICByZXR1cm4gdXBkYXRlZFVzZXI7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlcnIpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2NsaWVudCwgaGFuZGxlRXJyb3IsIGNsZWFyRXJyb3JdKTtcbiAgXG4gIC8vIFN5bmMgZGF0YVxuICBjb25zdCBzeW5jRGF0YSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpOiBQcm9taXNlPFN5bmNSZXN1bHQ+ID0+IHtcbiAgICB0cnkge1xuICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgICAgY2xlYXJFcnJvcigpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2xpZW50LnN5bmNEYXRhKCk7XG4gICAgICBzZXRMYXN0U3luYyhuZXcgRGF0ZSgpKTtcbiAgICAgIFxuICAgICAgLy8gUmVmcmVzaCBkYXRhIGFmdGVyIHN5bmNcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgcmVmcmVzaE1vb2RFbnRyaWVzKCksXG4gICAgICAgIHJlZnJlc2hTdGF0cygpLFxuICAgICAgXSk7XG4gICAgICBcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlcnIpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2NsaWVudCwgaGFuZGxlRXJyb3IsIGNsZWFyRXJyb3IsIHJlZnJlc2hNb29kRW50cmllc10pO1xuICBcbiAgLy8gUmVmcmVzaCBzdGF0c1xuICBjb25zdCByZWZyZXNoU3RhdHMgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0YXRzRGF0YSA9IGF3YWl0IGNsaWVudC5nZXRTdGF0cygpO1xuICAgICAgc2V0U3RhdHMoc3RhdHNEYXRhKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIGxvYWQgc3RhdHM6JywgZXJyKTtcbiAgICB9XG4gIH0sIFtjbGllbnRdKTtcbiAgXG4gIC8vIENsZWFyIGNhY2hlXG4gIGNvbnN0IGNsZWFyQ2FjaGUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY2xpZW50LmNsZWFyQ2FjaGUoKTtcbiAgfSwgW2NsaWVudF0pO1xuICBcbiAgLy8gSW5pdGlhbGl6ZSBvbiBtb3VudFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNoZWNrQ29ubmVjdGlvbigpO1xuICAgIHJlZnJlc2hNb29kRW50cmllcygpO1xuICAgIHJlZnJlc2hTdGF0cygpO1xuICB9LCBbY2hlY2tDb25uZWN0aW9uLCByZWZyZXNoTW9vZEVudHJpZXMsIHJlZnJlc2hTdGF0c10pO1xuICBcbiAgLy8gQXV0by1zeW5jIHNldHVwXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFhdXRvU3luYykgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKGlzQ29ubmVjdGVkKSB7XG4gICAgICAgIHN5bmNEYXRhKCkuY2F0Y2goY29uc29sZS53YXJuKTtcbiAgICAgIH1cbiAgICB9LCBzeW5jSW50ZXJ2YWwpO1xuICAgIFxuICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSwgW2F1dG9TeW5jLCBzeW5jSW50ZXJ2YWwsIGlzQ29ubmVjdGVkLCBzeW5jRGF0YV0pO1xuICBcbiAgcmV0dXJuIHtcbiAgICBjbGllbnQsXG4gICAgaXNDb25uZWN0ZWQsXG4gICAgaXNMb2FkaW5nLFxuICAgIGVycm9yLFxuICAgIGxhc3RTeW5jLFxuICAgIG1vb2RFbnRyaWVzLFxuICAgIGNyZWF0ZU1vb2RFbnRyeSxcbiAgICB1cGRhdGVNb29kRW50cnksXG4gICAgZGVsZXRlTW9vZEVudHJ5LFxuICAgIHJlZnJlc2hNb29kRW50cmllcyxcbiAgICBtb29kVHJlbmRzLFxuICAgIGdldE1vb2RUcmVuZHMsXG4gICAgdXNlcixcbiAgICB1cGRhdGVVc2VyLFxuICAgIHVwZGF0ZVVzZXJTZXR0aW5ncyxcbiAgICBzeW5jRGF0YSxcbiAgICBzdGF0cyxcbiAgICByZWZyZXNoU3RhdHMsXG4gICAgY2xlYXJDYWNoZSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUNhbGxiYWNrIiwidXNlTWVtbyIsIk1vb2RBcGlDbGllbnQiLCJ1c2VNb29kQXBpIiwib3B0aW9ucyIsImNvbmZpZyIsImF1dG9TeW5jIiwic3luY0ludGVydmFsIiwiY2xpZW50IiwiaXNDb25uZWN0ZWQiLCJzZXRJc0Nvbm5lY3RlZCIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsImVycm9yIiwic2V0RXJyb3IiLCJsYXN0U3luYyIsInNldExhc3RTeW5jIiwibW9vZEVudHJpZXMiLCJzZXRNb29kRW50cmllcyIsIm1vb2RUcmVuZHMiLCJzZXRNb29kVHJlbmRzIiwidXNlciIsInNldFVzZXIiLCJzdGF0cyIsInNldFN0YXRzIiwiaGFuZGxlRXJyb3IiLCJlcnIiLCJjb25zb2xlIiwibWVzc2FnZSIsImNsZWFyRXJyb3IiLCJjaGVja0Nvbm5lY3Rpb24iLCJoZWFsdGhDaGVjayIsInJlZnJlc2hNb29kRW50cmllcyIsInBhcmFtcyIsImVudHJpZXMiLCJnZXRNb29kRW50cmllcyIsImNyZWF0ZU1vb2RFbnRyeSIsInJlcXVlc3QiLCJlbnRyeSIsInByZXYiLCJ1cGRhdGVNb29kRW50cnkiLCJpZCIsIm1hcCIsImUiLCJkZWxldGVNb29kRW50cnkiLCJmaWx0ZXIiLCJnZXRNb29kVHJlbmRzIiwidHJlbmRzIiwidXBkYXRlVXNlciIsInVzZXJEYXRhIiwidXBkYXRlZFVzZXIiLCJ1cGRhdGVVc2VyUHJvZmlsZSIsInVwZGF0ZVVzZXJTZXR0aW5ncyIsInNldHRpbmdzIiwic3luY0RhdGEiLCJyZXN1bHQiLCJEYXRlIiwiUHJvbWlzZSIsImFsbCIsInJlZnJlc2hTdGF0cyIsInN0YXRzRGF0YSIsImdldFN0YXRzIiwid2FybiIsImNsZWFyQ2FjaGUiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2F0Y2giLCJjbGVhckludGVydmFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/mood-api/client/useMoodApi.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/mood-api/index.ts":
/*!***********************************!*\
  !*** ./src/lib/mood-api/index.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: function() { return /* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_0__.ApiError; },\n/* harmony export */   CacheService: function() { return /* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_0__.CacheService; },\n/* harmony export */   DataTransformService: function() { return /* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_0__.DataTransformService; },\n/* harmony export */   HttpClient: function() { return /* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_0__.HttpClient; },\n/* harmony export */   MoodApiClient: function() { return /* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_0__.MoodApiClient; },\n/* harmony export */   OfflineSyncService: function() { return /* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_0__.OfflineSyncService; },\n/* harmony export */   RealtimeService: function() { return /* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_0__.RealtimeService; },\n/* harmony export */   useMoodApi: function() { return /* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_0__.useMoodApi; }\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"(app-pages-browser)/./src/lib/mood-api/client/index.ts\");\n/**\n * Mood Tracker API Library\n * \n * Complete API library for mood tracking with client and server components.\n * \n * @fileoverview Main export file for API library\n * @author Mental Health Journal App\n * @version 1.0.0\n */ // Export client components\n // Export server components (when implemented)\n // export * from './server';\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvbW9vZC1hcGkvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0NBUUMsR0FFRCwyQkFBMkI7QUFDRixDQUV6Qiw4Q0FBOEM7Q0FDOUMsNEJBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9saWIvbW9vZC1hcGkvaW5kZXgudHM/YzJhNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1vb2QgVHJhY2tlciBBUEkgTGlicmFyeVxuICogXG4gKiBDb21wbGV0ZSBBUEkgbGlicmFyeSBmb3IgbW9vZCB0cmFja2luZyB3aXRoIGNsaWVudCBhbmQgc2VydmVyIGNvbXBvbmVudHMuXG4gKiBcbiAqIEBmaWxlb3ZlcnZpZXcgTWFpbiBleHBvcnQgZmlsZSBmb3IgQVBJIGxpYnJhcnlcbiAqIEBhdXRob3IgTWVudGFsIEhlYWx0aCBKb3VybmFsIEFwcFxuICogQHZlcnNpb24gMS4wLjBcbiAqL1xuXG4vLyBFeHBvcnQgY2xpZW50IGNvbXBvbmVudHNcbmV4cG9ydCAqIGZyb20gJy4vY2xpZW50JztcblxuLy8gRXhwb3J0IHNlcnZlciBjb21wb25lbnRzICh3aGVuIGltcGxlbWVudGVkKVxuLy8gZXhwb3J0ICogZnJvbSAnLi9zZXJ2ZXInO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/mood-api/index.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nvar enableRenderableContext = false;\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || enableRenderableContext  || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n\n          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  var ref;\n\n  {\n    ref = _ref;\n  }\n\n  var element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // debugInfo contains Server Component debug information.\n\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\nvar didWarnAboutKeySpread = {};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, isStaticChildren, source, self) {\n  {\n    if (!isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    } else {\n      // This is a valid element type.\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      var children = config.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    } // Warn about key spread regardless of whether the type is valid.\n\n\n    if (hasOwnProperty.call(config, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(config).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref')) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    var element = ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    }\n\n    return element;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nvar ownerHasKeyUseWarning = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = getComponentNameFromType(parentType);\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  // TODO: Move this to render phase instead of at element creation.\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar jsxDEV = jsxDEV$1 ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/MmRhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp%2Fcomponents%2FProviders.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp%2Fcomponents%2FServiceWorkerRegistration.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);