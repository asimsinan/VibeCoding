"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/v1/mood-entries/route";
exports.ids = ["app/api/v1/mood-entries/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = import("pg");;

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fv1%2Fmood-entries%2Froute&page=%2Fapi%2Fv1%2Fmood-entries%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fv1%2Fmood-entries%2Froute.ts&appDir=%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fv1%2Fmood-entries%2Froute&page=%2Fapi%2Fv1%2Fmood-entries%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fv1%2Fmood-entries%2Froute.ts&appDir=%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_asimsinanyuksel_Desktop_MoodTracker_src_app_api_v1_mood_entries_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/v1/mood-entries/route.ts */ \"(rsc)/./src/app/api/v1/mood-entries/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Users_asimsinanyuksel_Desktop_MoodTracker_src_app_api_v1_mood_entries_route_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_Users_asimsinanyuksel_Desktop_MoodTracker_src_app_api_v1_mood_entries_route_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/v1/mood-entries/route\",\n        pathname: \"/api/v1/mood-entries\",\n        filename: \"route\",\n        bundlePath: \"app/api/v1/mood-entries/route\"\n    },\n    resolvedPagePath: \"/Users/asimsinanyuksel/Desktop/MoodTracker/src/app/api/v1/mood-entries/route.ts\",\n    nextConfigOutput,\n    userland: _Users_asimsinanyuksel_Desktop_MoodTracker_src_app_api_v1_mood_entries_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/v1/mood-entries/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ2MSUyRm1vb2QtZW50cmllcyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGdjElMkZtb29kLWVudHJpZXMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZ2MSUyRm1vb2QtZW50cmllcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmFzaW1zaW5hbnl1a3NlbCUyRkRlc2t0b3AlMkZNb29kVHJhY2tlciUyRnNyYyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZhc2ltc2luYW55dWtzZWwlMkZEZXNrdG9wJTJGTW9vZFRyYWNrZXImaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUMrQjtBQUM1RztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL21vb2QtdHJhY2tlci8/OThmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvYXNpbXNpbmFueXVrc2VsL0Rlc2t0b3AvTW9vZFRyYWNrZXIvc3JjL2FwcC9hcGkvdjEvbW9vZC1lbnRyaWVzL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcInN0YW5kYWxvbmVcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdjEvbW9vZC1lbnRyaWVzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdjEvbW9vZC1lbnRyaWVzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS92MS9tb29kLWVudHJpZXMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvYXNpbXNpbmFueXVrc2VsL0Rlc2t0b3AvTW9vZFRyYWNrZXIvc3JjL2FwcC9hcGkvdjEvbW9vZC1lbnRyaWVzL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS92MS9tb29kLWVudHJpZXMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fv1%2Fmood-entries%2Froute&page=%2Fapi%2Fv1%2Fmood-entries%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fv1%2Fmood-entries%2Froute.ts&appDir=%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/v1/mood-entries/route.ts":
/*!**********************************************!*\
  !*** ./src/app/api/v1/mood-entries/route.ts ***!
  \**********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_api_storage_postgres_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/api-storage/postgres-adapter */ \"(rsc)/./src/lib/api-storage/postgres-adapter.ts\");\n/* harmony import */ var _lib_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/utils/dateUtils */ \"(rsc)/./src/lib/utils/dateUtils.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_api_storage_postgres_adapter__WEBPACK_IMPORTED_MODULE_1__]);\n_lib_api_storage_postgres_adapter__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Initialize PostgreSQL database\nconst db = _lib_api_storage_postgres_adapter__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getInstance();\nasync function GET(request) {\n    try {\n        // Debug: Log environment variables (remove in production)\n        console.log(\"DATABASE_URL exists:\", !!process.env.DATABASE_URL);\n        console.log(\"NODE_ENV:\", \"development\");\n        const { searchParams } = new URL(request.url);\n        const startDate = searchParams.get(\"startDate\");\n        const endDate = searchParams.get(\"endDate\");\n        const limit = searchParams.get(\"limit\");\n        const offset = searchParams.get(\"offset\");\n        // Get mood entries from PostgreSQL database\n        let entries;\n        try {\n            if (startDate && endDate) {\n                entries = await db.getMoodEntriesByDateRange(\"default-user\", startDate, endDate);\n            } else {\n                entries = await db.getAllMoodEntries(\"default-user\");\n            }\n            // Transform API response to UI format\n            const transformedEntries = entries.map((entry)=>{\n                // Handle date conversion - entry_date is a string from PostgreSQL\n                const date = new Date(entry.entry_date);\n                const year = date.getFullYear();\n                const month = String(date.getMonth() + 1).padStart(2, \"0\");\n                const day = String(date.getDate()).padStart(2, \"0\");\n                const entryDate = `${year}-${month}-${day}`;\n                return {\n                    id: entry.id.toString(),\n                    userId: entry.user_id,\n                    rating: entry.rating,\n                    notes: entry.notes,\n                    date: entryDate,\n                    entryDate: entryDate,\n                    createdAt: entry.created_at,\n                    updatedAt: entry.updated_at,\n                    status: entry.status,\n                    tags: entry.tags || [],\n                    metadata: entry.metadata || {}\n                };\n            });\n            // Apply pagination\n            const limitNum = limit ? parseInt(limit) : 50;\n            const offsetNum = offset ? parseInt(offset) : 0;\n            const paginatedEntries = transformedEntries.slice(offsetNum, offsetNum + limitNum);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                data: paginatedEntries,\n                pagination: {\n                    total: transformedEntries.length,\n                    limit: limitNum,\n                    offset: offsetNum,\n                    hasMore: offsetNum + limitNum < transformedEntries.length\n                }\n            });\n        } catch (dbError) {\n            console.error(\"❌ Database error:\", dbError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Database connection failed\",\n                details: dbError instanceof Error ? dbError.message : \"Unknown database error\"\n            }, {\n                status: 500\n            });\n        }\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n        console.error(\"❌ Error fetching mood entries:\", error);\n        console.error(\"❌ Error details:\", {\n            message: errorMessage,\n            stack: error instanceof Error ? error.stack : undefined,\n            name: error instanceof Error ? error.name : \"Unknown\"\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: {\n                code: \"INTERNAL_ERROR\",\n                message: \"Failed to fetch mood entries\",\n                details: errorMessage\n            }\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        // Validate required fields\n        if (!body.rating || body.rating < 1 || body.rating > 10) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: {\n                    code: \"VALIDATION_ERROR\",\n                    message: \"Rating must be between 1 and 10\"\n                }\n            }, {\n                status: 400\n            });\n        }\n        // Create mood entry in PostgreSQL database\n        const newEntry = await db.createMoodEntry({\n            user_id: \"default-user\",\n            rating: body.rating,\n            notes: body.notes || null,\n            entry_date: body.entryDate || (0,_lib_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getTodayLocal)(),\n            status: \"active\",\n            tags: body.tags || [],\n            metadata: body.metadata || {}\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(newEntry, {\n            status: 201\n        });\n    } catch (error) {\n        console.error(\"Error creating mood entry:\", error);\n        // Handle duplicate key constraint (user already has an entry for this date)\n        if (error.code === \"23505\" && error.constraint === \"moodtracker_user_id_entry_date_key\") {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: {\n                    code: \"DUPLICATE_ENTRY\",\n                    message: \"You already have a mood entry for this date. Please update your existing entry instead.\"\n                }\n            }, {\n                status: 409\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: {\n                code: \"INTERNAL_ERROR\",\n                message: \"Failed to create mood entry\"\n            }\n        }, {\n            status: 500\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/v1/mood-entries/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/api-storage/postgres-adapter.ts":
/*!*************************************************!*\
  !*** ./src/lib/api-storage/postgres-adapter.ts ***!
  \*************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/**\n * PostgreSQL Adapter for API Routes\n * \n * This provides PostgreSQL database operations for the API routes.\n */ \nclass PostgresAdapter {\n    constructor(){\n        // For Vercel deployment, use DATABASE_URL if available, otherwise use individual env vars\n        const config = process.env.DATABASE_URL ? {\n            connectionString: process.env.DATABASE_URL,\n            ssl: {\n                rejectUnauthorized: false\n            }\n        } : {\n            host: process.env.POSTGRES_HOST || \"localhost\",\n            port: parseInt(process.env.POSTGRES_PORT || \"5432\"),\n            database: process.env.POSTGRES_DB || \"moodtracker\",\n            user: process.env.POSTGRES_USER || \"postgres\",\n            password: process.env.POSTGRES_PASSWORD || \"postgres\",\n            ssl: process.env.POSTGRES_SSL === \"true\" ? {\n                rejectUnauthorized: false\n            } : false\n        };\n        this.pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool(config);\n    }\n    static getInstance() {\n        if (!PostgresAdapter.instance) {\n            PostgresAdapter.instance = new PostgresAdapter();\n        }\n        return PostgresAdapter.instance;\n    }\n    // Create a new mood entry\n    async createMoodEntry(entry) {\n        const client = await this.pool.connect();\n        try {\n            const query = `\n        INSERT INTO moodtracker (user_id, rating, notes, entry_date, status, tags, metadata)\n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING id, user_id, rating, notes, entry_date, created_at, updated_at, status, tags, metadata\n      `;\n            const values = [\n                entry.user_id,\n                entry.rating,\n                entry.notes,\n                entry.entry_date,\n                entry.status,\n                entry.tags,\n                JSON.stringify(entry.metadata)\n            ];\n            const result = await client.query(query, values);\n            const row = result.rows[0];\n            return {\n                id: row.id,\n                user_id: row.user_id,\n                rating: row.rating,\n                notes: row.notes,\n                entry_date: row.entry_date,\n                created_at: row.created_at,\n                updated_at: row.updated_at,\n                status: row.status,\n                tags: row.tags || [],\n                metadata: row.metadata || {}\n            };\n        } finally{\n            client.release();\n        }\n    }\n    // Get a mood entry by ID\n    async getMoodEntry(id) {\n        const client = await this.pool.connect();\n        try {\n            const query = \"SELECT * FROM moodtracker WHERE id = $1\";\n            const result = await client.query(query, [\n                id\n            ]);\n            if (result.rows.length === 0) {\n                return undefined;\n            }\n            const row = result.rows[0];\n            return {\n                id: row.id,\n                user_id: row.user_id,\n                rating: row.rating,\n                notes: row.notes,\n                entry_date: row.entry_date,\n                created_at: row.created_at,\n                updated_at: row.updated_at,\n                status: row.status,\n                tags: row.tags || [],\n                metadata: row.metadata || {}\n            };\n        } finally{\n            client.release();\n        }\n    }\n    // Update a mood entry\n    async updateMoodEntry(id, updates) {\n        const client = await this.pool.connect();\n        try {\n            const setClause = [];\n            const values = [];\n            let paramCount = 1;\n            if (updates.rating !== undefined) {\n                setClause.push(`rating = $${paramCount++}`);\n                values.push(updates.rating);\n            }\n            if (updates.notes !== undefined) {\n                setClause.push(`notes = $${paramCount++}`);\n                values.push(updates.notes);\n            }\n            if (updates.entry_date !== undefined) {\n                setClause.push(`entry_date = $${paramCount++}`);\n                values.push(updates.entry_date);\n            }\n            if (updates.status !== undefined) {\n                setClause.push(`status = $${paramCount++}`);\n                values.push(updates.status);\n            }\n            if (updates.tags !== undefined) {\n                setClause.push(`tags = $${paramCount++}`);\n                values.push(updates.tags);\n            }\n            if (updates.metadata !== undefined) {\n                setClause.push(`metadata = $${paramCount++}`);\n                values.push(JSON.stringify(updates.metadata));\n            }\n            if (setClause.length === 0) {\n                return this.getMoodEntry(id);\n            }\n            setClause.push(`updated_at = CURRENT_TIMESTAMP`);\n            values.push(id);\n            const query = `\n        UPDATE moodtracker \n        SET ${setClause.join(\", \")}\n        WHERE id = $${paramCount}\n        RETURNING id, user_id, rating, notes, entry_date, created_at, updated_at, status, tags, metadata\n      `;\n            const result = await client.query(query, values);\n            if (result.rows.length === 0) {\n                return undefined;\n            }\n            const row = result.rows[0];\n            return {\n                id: row.id,\n                user_id: row.user_id,\n                rating: row.rating,\n                notes: row.notes,\n                entry_date: row.entry_date,\n                created_at: row.created_at,\n                updated_at: row.updated_at,\n                status: row.status,\n                tags: row.tags || [],\n                metadata: row.metadata || {}\n            };\n        } finally{\n            client.release();\n        }\n    }\n    // Delete a mood entry\n    async deleteMoodEntry(id) {\n        const client = await this.pool.connect();\n        try {\n            const query = \"DELETE FROM moodtracker WHERE id = $1\";\n            const result = await client.query(query, [\n                id\n            ]);\n            return (result.rowCount ?? 0) > 0;\n        } finally{\n            client.release();\n        }\n    }\n    // Get all mood entries for a user\n    async getAllMoodEntries(userId) {\n        const client = await this.pool.connect();\n        try {\n            const query = `\n        SELECT * FROM moodtracker \n        WHERE user_id = $1 \n        ORDER BY entry_date DESC\n      `;\n            const result = await client.query(query, [\n                userId\n            ]);\n            return result.rows.map((row)=>({\n                    id: row.id,\n                    user_id: row.user_id,\n                    rating: row.rating,\n                    notes: row.notes,\n                    entry_date: row.entry_date,\n                    created_at: row.created_at,\n                    updated_at: row.updated_at,\n                    status: row.status,\n                    tags: row.tags || [],\n                    metadata: row.metadata || {}\n                }));\n        } finally{\n            client.release();\n        }\n    }\n    // Get mood entries by date range for a user\n    async getMoodEntriesByDateRange(userId, startDate, endDate) {\n        const client = await this.pool.connect();\n        try {\n            const query = `\n        SELECT * FROM moodtracker \n        WHERE user_id = $1 AND entry_date >= $2 AND entry_date <= $3\n        ORDER BY entry_date DESC\n      `;\n            const result = await client.query(query, [\n                userId,\n                startDate,\n                endDate\n            ]);\n            return result.rows.map((row)=>({\n                    id: row.id,\n                    user_id: row.user_id,\n                    rating: row.rating,\n                    notes: row.notes,\n                    entry_date: row.entry_date,\n                    created_at: row.created_at,\n                    updated_at: row.updated_at,\n                    status: row.status,\n                    tags: row.tags || [],\n                    metadata: row.metadata || {}\n                }));\n        } finally{\n            client.release();\n        }\n    }\n    // Close the connection pool\n    async close() {\n        await this.pool.end();\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PostgresAdapter);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/api-storage/postgres-adapter.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/utils/dateUtils.ts":
/*!************************************!*\
  !*** ./src/lib/utils/dateUtils.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatDateLocal: () => (/* binding */ formatDateLocal),\n/* harmony export */   getDateRangeLocal: () => (/* binding */ getDateRangeLocal),\n/* harmony export */   getTodayLocal: () => (/* binding */ getTodayLocal),\n/* harmony export */   isTodayLocal: () => (/* binding */ isTodayLocal)\n/* harmony export */ });\n/**\n * Date utility functions for timezone-aware date handling\n */ /**\n * Get today's date in YYYY-MM-DD format using local timezone\n * This ensures the date matches what the user sees in their timezone\n */ function getTodayLocal() {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, \"0\");\n    const day = String(now.getDate()).padStart(2, \"0\");\n    return `${year}-${month}-${day}`;\n}\n/**\n * Get a date in YYYY-MM-DD format using local timezone\n * @param date - Date object or date string\n */ function formatDateLocal(date) {\n    const d = new Date(date);\n    const year = d.getFullYear();\n    const month = String(d.getMonth() + 1).padStart(2, \"0\");\n    const day = String(d.getDate()).padStart(2, \"0\");\n    return `${year}-${month}-${day}`;\n}\n/**\n * Get a date range for the last N days using local timezone\n * @param days - Number of days to go back\n */ function getDateRangeLocal(days) {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(endDate.getDate() - days);\n    return {\n        startDate: formatDateLocal(startDate),\n        endDate: formatDateLocal(endDate)\n    };\n}\n/**\n * Check if a date is today using local timezone\n * @param dateString - Date string in YYYY-MM-DD format\n */ function isTodayLocal(dateString) {\n    return dateString === getTodayLocal();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3V0aWxzL2RhdGVVdGlscy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0NBRUMsR0FFRDs7O0NBR0MsR0FDTSxTQUFTQTtJQUNkLE1BQU1DLE1BQU0sSUFBSUM7SUFDaEIsTUFBTUMsT0FBT0YsSUFBSUcsV0FBVztJQUM1QixNQUFNQyxRQUFRQyxPQUFPTCxJQUFJTSxRQUFRLEtBQUssR0FBR0MsUUFBUSxDQUFDLEdBQUc7SUFDckQsTUFBTUMsTUFBTUgsT0FBT0wsSUFBSVMsT0FBTyxJQUFJRixRQUFRLENBQUMsR0FBRztJQUM5QyxPQUFPLENBQUMsRUFBRUwsS0FBSyxDQUFDLEVBQUVFLE1BQU0sQ0FBQyxFQUFFSSxJQUFJLENBQUM7QUFDbEM7QUFFQTs7O0NBR0MsR0FDTSxTQUFTRSxnQkFBZ0JDLElBQW1CO0lBQ2pELE1BQU1DLElBQUksSUFBSVgsS0FBS1U7SUFDbkIsTUFBTVQsT0FBT1UsRUFBRVQsV0FBVztJQUMxQixNQUFNQyxRQUFRQyxPQUFPTyxFQUFFTixRQUFRLEtBQUssR0FBR0MsUUFBUSxDQUFDLEdBQUc7SUFDbkQsTUFBTUMsTUFBTUgsT0FBT08sRUFBRUgsT0FBTyxJQUFJRixRQUFRLENBQUMsR0FBRztJQUM1QyxPQUFPLENBQUMsRUFBRUwsS0FBSyxDQUFDLEVBQUVFLE1BQU0sQ0FBQyxFQUFFSSxJQUFJLENBQUM7QUFDbEM7QUFFQTs7O0NBR0MsR0FDTSxTQUFTSyxrQkFBa0JDLElBQVk7SUFDNUMsTUFBTUMsVUFBVSxJQUFJZDtJQUNwQixNQUFNZSxZQUFZLElBQUlmO0lBQ3RCZSxVQUFVQyxPQUFPLENBQUNGLFFBQVFOLE9BQU8sS0FBS0s7SUFFdEMsT0FBTztRQUNMRSxXQUFXTixnQkFBZ0JNO1FBQzNCRCxTQUFTTCxnQkFBZ0JLO0lBQzNCO0FBQ0Y7QUFFQTs7O0NBR0MsR0FDTSxTQUFTRyxhQUFhQyxVQUFrQjtJQUM3QyxPQUFPQSxlQUFlcEI7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb29kLXRyYWNrZXIvLi9zcmMvbGliL3V0aWxzL2RhdGVVdGlscy50cz8wZDQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGF0ZSB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgdGltZXpvbmUtYXdhcmUgZGF0ZSBoYW5kbGluZ1xuICovXG5cbi8qKlxuICogR2V0IHRvZGF5J3MgZGF0ZSBpbiBZWVlZLU1NLUREIGZvcm1hdCB1c2luZyBsb2NhbCB0aW1lem9uZVxuICogVGhpcyBlbnN1cmVzIHRoZSBkYXRlIG1hdGNoZXMgd2hhdCB0aGUgdXNlciBzZWVzIGluIHRoZWlyIHRpbWV6b25lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb2RheUxvY2FsKCk6IHN0cmluZyB7XG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gIGNvbnN0IHllYXIgPSBub3cuZ2V0RnVsbFllYXIoKTtcbiAgY29uc3QgbW9udGggPSBTdHJpbmcobm93LmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpO1xuICBjb25zdCBkYXkgPSBTdHJpbmcobm93LmdldERhdGUoKSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgcmV0dXJuIGAke3llYXJ9LSR7bW9udGh9LSR7ZGF5fWA7XG59XG5cbi8qKlxuICogR2V0IGEgZGF0ZSBpbiBZWVlZLU1NLUREIGZvcm1hdCB1c2luZyBsb2NhbCB0aW1lem9uZVxuICogQHBhcmFtIGRhdGUgLSBEYXRlIG9iamVjdCBvciBkYXRlIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RGF0ZUxvY2FsKGRhdGU6IERhdGUgfCBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBkID0gbmV3IERhdGUoZGF0ZSk7XG4gIGNvbnN0IHllYXIgPSBkLmdldEZ1bGxZZWFyKCk7XG4gIGNvbnN0IG1vbnRoID0gU3RyaW5nKGQuZ2V0TW9udGgoKSArIDEpLnBhZFN0YXJ0KDIsICcwJyk7XG4gIGNvbnN0IGRheSA9IFN0cmluZyhkLmdldERhdGUoKSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgcmV0dXJuIGAke3llYXJ9LSR7bW9udGh9LSR7ZGF5fWA7XG59XG5cbi8qKlxuICogR2V0IGEgZGF0ZSByYW5nZSBmb3IgdGhlIGxhc3QgTiBkYXlzIHVzaW5nIGxvY2FsIHRpbWV6b25lXG4gKiBAcGFyYW0gZGF5cyAtIE51bWJlciBvZiBkYXlzIHRvIGdvIGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGVSYW5nZUxvY2FsKGRheXM6IG51bWJlcik6IHsgc3RhcnREYXRlOiBzdHJpbmc7IGVuZERhdGU6IHN0cmluZyB9IHtcbiAgY29uc3QgZW5kRGF0ZSA9IG5ldyBEYXRlKCk7XG4gIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKCk7XG4gIHN0YXJ0RGF0ZS5zZXREYXRlKGVuZERhdGUuZ2V0RGF0ZSgpIC0gZGF5cyk7XG4gIFxuICByZXR1cm4ge1xuICAgIHN0YXJ0RGF0ZTogZm9ybWF0RGF0ZUxvY2FsKHN0YXJ0RGF0ZSksXG4gICAgZW5kRGF0ZTogZm9ybWF0RGF0ZUxvY2FsKGVuZERhdGUpXG4gIH07XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBkYXRlIGlzIHRvZGF5IHVzaW5nIGxvY2FsIHRpbWV6b25lXG4gKiBAcGFyYW0gZGF0ZVN0cmluZyAtIERhdGUgc3RyaW5nIGluIFlZWVktTU0tREQgZm9ybWF0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1RvZGF5TG9jYWwoZGF0ZVN0cmluZzogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBkYXRlU3RyaW5nID09PSBnZXRUb2RheUxvY2FsKCk7XG59XG4iXSwibmFtZXMiOlsiZ2V0VG9kYXlMb2NhbCIsIm5vdyIsIkRhdGUiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJtb250aCIsIlN0cmluZyIsImdldE1vbnRoIiwicGFkU3RhcnQiLCJkYXkiLCJnZXREYXRlIiwiZm9ybWF0RGF0ZUxvY2FsIiwiZGF0ZSIsImQiLCJnZXREYXRlUmFuZ2VMb2NhbCIsImRheXMiLCJlbmREYXRlIiwic3RhcnREYXRlIiwic2V0RGF0ZSIsImlzVG9kYXlMb2NhbCIsImRhdGVTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/utils/dateUtils.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fv1%2Fmood-entries%2Froute&page=%2Fapi%2Fv1%2Fmood-entries%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fv1%2Fmood-entries%2Froute.ts&appDir=%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fasimsinanyuksel%2FDesktop%2FMoodTracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();