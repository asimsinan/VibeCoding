"use strict";exports.id=601,exports.ids=[601],exports.modules={2134:(e,t,a)=>{a.d(t,{H:()=>s});var r=a(2777);class s{constructor(){this.supabase=r.supabase}async ensureUserExists(e){try{let{data:t,error:a}=await this.supabase.from("users").select("id").eq("id",e).single();if(t)return;if(a&&"PGRST116"===a.code){let{data:t,error:a}=await this.supabase.auth.getUser();if(a||!t?.user)throw Error("User authentication failed");if(t.user.id!==e)throw Error("User ID mismatch");let r=t.user.user_metadata?.full_name||t.user.email?.split("@")[0]||"User",s={id:e,email:t.user.email||"unknown@example.com",name:r},{data:i,error:n}=await this.supabase.from("users").insert(s).select().single();if(n)throw Error(`Failed to create user: ${n.message}`)}else if(a)throw Error(`Failed to check user existence: ${a.message}`)}catch(e){throw Error(`Failed to ensure user exists: ${e instanceof Error?e.message:"Unknown error"}`)}}async registerAttendee(e){try{await this.ensureUserExists(e.userId);let{data:t,error:a}=await this.supabase.from("events").select("capacity").eq("id",e.eventId).single();if(a||!t)throw Error("Event not found");let{count:r}=await this.supabase.from("attendees").select("*",{count:"exact",head:!0}).eq("event_id",e.eventId).eq("status","registered");if((r||0)>=t.capacity)throw Error("Event is at full capacity. Registration is no longer available.");let{data:s,error:i}=await this.supabase.from("attendees").select("id, status").eq("event_id",e.eventId).eq("user_id",e.userId).single();if(s)throw Error("You are already registered for this event");if(i&&"PGRST116"!==i.code)throw Error(`Failed to check existing registration: ${i.message}`);let n={id:crypto.randomUUID(),eventId:e.eventId,userId:e.userId,type:e.type||"attendee",status:"registered",registrationDate:new Date().toISOString(),metadata:{...e.metadata,customFields:{...e.metadata?.customFields}},createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},{error:o}=await this.supabase.from("attendees").insert({id:n.id,event_id:n.eventId,user_id:n.userId,status:n.status,registration_date:n.registrationDate,metadata:n.metadata});if(o)throw Error(`Database error: ${o.message}`);return n}catch(e){throw Error(`Failed to register attendee: ${e instanceof Error?e.message:"Unknown error"}`)}}async isUserRegistered(e,t){try{let{data:a,error:r}=await this.supabase.from("attendees").select("id").eq("event_id",e).eq("user_id",t).single();if(r&&"PGRST116"!==r.code)throw Error(`Failed to check registration: ${r.message}`);return!!a}catch(e){return!1}}async getAttendeesByUser(e){try{let{data:t,error:a}=await this.supabase.from("attendees").select("*").eq("user_id",e).order("registration_date",{ascending:!1});if(a||!t||!Array.isArray(t))return[];return t.map(e=>{try{return this.mapRowToAttendee(e)}catch(t){return{id:e.id||"unknown",eventId:e.event_id||"unknown",userId:e.user_id||"unknown",status:e.status||"registered",type:e.type||"attendee",registrationDate:e.registration_date||new Date().toISOString(),checkInDate:e.check_in_date,checkOutDate:e.check_out_date,metadata:{customFields:{},notes:e.notes||""},createdAt:e.created_at||new Date().toISOString(),updatedAt:e.updated_at||new Date().toISOString()}}})}catch(e){return[]}}async getAttendeeById(e){try{let{data:t,error:a}=await this.supabase.from("attendees").select("*").eq("id",e).single();if(a){if("PGRST116"===a.code)return null;throw Error(`Database error: ${a.message}`)}return this.mapRowToAttendee(t)}catch(e){throw Error(`Failed to get attendee: ${e instanceof Error?e.message:"Unknown error"}`)}}async updateAttendee(e,t){try{let a={};void 0!==t.status&&(a.status=t.status),void 0!==t.metadata&&(a.metadata=t.metadata),void 0!==t.checkInDate&&(a.check_in_date=t.checkInDate),void 0!==t.checkOutDate&&(a.check_out_date=t.checkOutDate),a.updated_at=new Date().toISOString();let{data:r,error:s}=await this.supabase.from("attendees").update(a).eq("id",e).select().single();if(s)throw Error(`Database error: ${s.message}`);return this.mapRowToAttendee(r)}catch(e){throw Error(`Failed to update attendee: ${e instanceof Error?e.message:"Unknown error"}`)}}async checkInAttendee(e){try{let{data:t,error:a}=await this.supabase.from("attendees").update({status:"checked_in",check_in_time:new Date().toISOString(),updated_at:new Date().toISOString()}).eq("id",e).select().single();if(a)throw Error(`Database error: ${a.message}`);return this.mapRowToAttendee(t)}catch(e){throw Error(`Failed to check in attendee: ${e instanceof Error?e.message:"Unknown error"}`)}}async checkOutAttendee(e){try{let{data:t,error:a}=await this.supabase.from("attendees").update({status:"checked_out",check_out_time:new Date().toISOString(),updated_at:new Date().toISOString()}).eq("id",e).select().single();if(a)throw Error(`Database error: ${a.message}`);return this.mapRowToAttendee(t)}catch(e){throw Error(`Failed to check out attendee: ${e instanceof Error?e.message:"Unknown error"}`)}}async listEventAttendees(e,t={}){try{let{status:a,page:r=1,limit:s=20}=t,i=this.supabase.from("attendees").select("*",{count:"exact"}).eq("event_id",e);a&&(i=i.eq("status",a));let n=(r-1)*s;i=(i=i.range(n,n+s-1)).order("registration_date",{ascending:!1});let{data:o,error:d,count:c}=await i;if(d)throw Error(`Database error: ${d.message}`);return{data:o.map(e=>this.mapRowToAttendee(e)),total:c||0,page:r,limit:s}}catch(e){throw Error(`Failed to list event attendees: ${e instanceof Error?e.message:"Unknown error"}`)}}async getEventAttendeeCount(e){try{let{count:t,error:a}=await this.supabase.from("attendees").select("*",{count:"exact",head:!0}).eq("event_id",e);if(a)throw Error(`Database error: ${a.message}`);return t||0}catch(e){throw Error(`Failed to get attendee count: ${e instanceof Error?e.message:"Unknown error"}`)}}async cancelAttendeeRegistration(e){try{let{error:t}=await this.supabase.from("attendees").update({status:"cancelled",updated_at:new Date().toISOString()}).eq("id",e);if(t)throw Error(`Database error: ${t.message}`);return!0}catch(e){throw Error(`Failed to cancel attendee registration: ${e instanceof Error?e.message:"Unknown error"}`)}}mapRowToAttendee(e){return{id:e.id,eventId:e.event_id,userId:e.user_id,status:e.status,type:e.type||"attendee",registrationDate:e.registration_date,checkInDate:e.check_in_date,checkOutDate:e.check_out_date,metadata:{...e.metadata,customFields:{...e.metadata?.customFields,notes:e.notes||""}},createdAt:e.created_at,updatedAt:e.updated_at}}}},5668:(e,t,a)=>{a.d(t,{P:()=>s});var r=a(2777);class s{constructor(){this.supabase=r.supabase}async createEvent(e){try{let t=e.organizerId;if(!t)throw Error("Organizer ID is required");let{data:a,error:r}=await this.supabase.from("users").select("id").eq("id",t).single();if(r&&r.code,!a){let{data:e,error:a}=await this.supabase.auth.getUser();if(a||!e?.user)throw Error("User not authenticated");let r=e.user.user_metadata?.full_name||e.user.email?.split("@")[0]||"Demo User",{data:s,error:i}=await this.supabase.from("users").insert({id:t,email:e.user.email||"demo@demo.com",name:r}).select().single();if(i||!s)throw Error(`Failed to create user record: ${i?.message||"Unknown error"}`)}let s={id:crypto.randomUUID(),title:e.title,description:e.description,startDate:e.startDate,endDate:e.endDate,metadata:{...e.metadata,timezone:"UTC",tags:[]},capacity:e.capacity,attendeeCount:0,type:e.type||"conference",status:"draft",organizerId:t,isPublic:e.isPublic??!0,registrationOpen:e.registrationOpen??!0,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},{error:i}=await this.supabase.from("events").insert({id:s.id,title:s.title,description:s.description,start_date:s.startDate,end_date:s.endDate,capacity:s.capacity,status:s.status,organizer_id:s.organizerId,is_public:s.isPublic,metadata:s.metadata});if(i)throw Error(`Database error: ${i.message}`);return s}catch(e){throw Error(`Failed to create event: ${e instanceof Error?e.message:"Unknown error"}`)}}async getEventById(e){try{let{data:t,error:a}=await this.supabase.from("events").select("*").eq("id",e).single();if(a){if("PGRST116"===a.code)return null;throw Error(`Database error: ${a.message}`)}return await this.mapRowToEvent(t)}catch(e){throw Error(`Failed to get event: ${e instanceof Error?e.message:"Unknown error"}`)}}async updateEvent(e,t,a){try{if(a){let t=await this.getEventById(e);if(!t)throw Error("Event not found");if(t.organizerId!==a)throw Error("You do not have permission to update this event")}let r={};void 0!==t.title&&(r.title=t.title),void 0!==t.description&&(r.description=t.description),void 0!==t.startDate&&(r.start_date=t.startDate),void 0!==t.endDate&&(r.end_date=t.endDate),void 0!==t.capacity&&(r.capacity=t.capacity),void 0!==t.status&&(r.status=t.status),void 0!==t.isPublic&&(r.is_public=t.isPublic),void 0!==t.metadata&&(r.metadata=t.metadata),r.updated_at=new Date().toISOString();let{data:s,error:i}=await this.supabase.from("events").update(r).eq("id",e).select().single();if(i)throw Error(`Database error: ${i.message}`);return await this.mapRowToEvent(s)}catch(e){throw Error(`Failed to update event: ${e instanceof Error?e.message:"Unknown error"}`)}}async deleteEvent(e,t){try{let{error:a}=await this.supabase.from("events").delete().eq("id",e).eq("organizer_id",t);if(a)throw Error(`Database error: ${a.message}`);return!0}catch(e){throw Error(`Failed to delete event: ${e instanceof Error?e.message:"Unknown error"}`)}}async listEvents(e={}){try{let{organizerId:t,status:a,isPublic:r,search:s,page:i=1,limit:n=20,userId:o}=e,d=this.supabase.from("events").select("*",{count:"exact"});t&&(d=d.eq("organizer_id",t)),a&&(d=d.eq("status",a)),void 0!==r&&(d=d.eq("is_public",r)),s&&(d=d.or(`title.ilike.%${s}%,description.ilike.%${s}%`));let c=(i-1)*n;d=(d=d.range(c,c+n-1)).order("created_at",{ascending:!1});let{data:u,error:l,count:h}=await d;if(l)throw Error(`Database error: ${l.message}`);return{data:await Promise.all(u.map(e=>this.mapRowToEvent(e))),total:h||0,page:i,limit:n}}catch(e){throw Error(`Failed to list events: ${e instanceof Error?e.message:"Unknown error"}`)}}async updateEventStatus(e,t,a){try{let{data:r,error:s}=await this.supabase.from("events").update({status:t,updated_at:new Date().toISOString()}).eq("id",e).eq("organizer_id",a).select().single();if(s)throw Error(`Database error: ${s.message}`);return await this.mapRowToEvent(r)}catch(e){throw Error(`Failed to update event status: ${e instanceof Error?e.message:"Unknown error"}`)}}async getEventAnalytics(e){try{let{count:t}=await this.supabase.from("attendees").select("*",{count:"exact",head:!0}).eq("event_id",e),{count:a}=await this.supabase.from("attendees").select("*",{count:"exact",head:!0}).eq("event_id",e).eq("status","checked_in"),{data:r}=await this.supabase.from("attendees").select("created_at").eq("event_id",e).gte("created_at",new Date(Date.now()-2592e6).toISOString()),s=new Map;r?.forEach(e=>{let t=e.created_at.split("T")[0];s.set(t,(s.get(t)||0)+1)});let i=Array.from(s.entries()).map(([e,t])=>({date:e,count:t})),{data:n}=await this.supabase.from("attendees").select(`
          user_id,
          users!inner(timezone)
        `).eq("event_id",e),o=new Map;n?.forEach(e=>{let t=e.users?.timezone||"UTC";o.set(t,(o.get(t)||0)+1)});let d=Array.from(o.entries()).map(([e,t])=>({timezone:e,count:t})),{count:c}=await this.supabase.from("connections").select("*",{count:"exact",head:!0}).eq("event_id",e).eq("status","accepted");return{totalRegistrations:t||0,totalAttendees:a||0,attendanceRate:(t||0)>0?(a||0)/(t||1)*100:0,registrationTrend:i,attendeeDemographics:{byLocation:[],byTimezone:d},engagementMetrics:{averageSessionAttendance:0,networkingConnections:c||0,messageCount:0}}}catch(e){throw Error(`Failed to get event analytics: ${e instanceof Error?e.message:"Unknown error"}`)}}async isEventAtCapacity(e){try{let t=await this.getEventById(e);if(!t)throw Error("Event not found");let{count:a}=await this.supabase.from("attendees").select("*",{count:"exact",head:!0}).eq("event_id",e).eq("status","registered");return(a||0)>=t.capacity}catch(e){throw Error(`Failed to check event capacity: ${e instanceof Error?e.message:"Unknown error"}`)}}async getEventWaitlist(e){try{let{data:t,error:a}=await this.supabase.from("event_waitlist").select("user_id, created_at").eq("event_id",e).order("created_at",{ascending:!0});if(a)throw Error(`Database error: ${a.message}`);return t.map((e,t)=>({userId:e.user_id,position:t+1,requestedAt:e.created_at}))}catch(e){throw Error(`Failed to get event waitlist: ${e instanceof Error?e.message:"Unknown error"}`)}}async mapRowToEvent(e){let t=0;try{let{count:a}=await this.supabase.from("attendees").select("id",{count:"exact"}).eq("event_id",e.id);t=a||0}catch(a){try{let{count:a}=await this.supabase.from("event_attendees").select("id",{count:"exact"}).eq("event_id",e.id);t=a||0}catch(e){t=0}}return{id:e.id,title:e.title,description:e.description,startDate:e.start_date,endDate:e.end_date,capacity:e.capacity,attendeeCount:t,type:e.type||"conference",status:e.status,organizerId:e.organizer_id,isPublic:e.is_public,registrationOpen:e.registration_open??!0,metadata:e.metadata||{},createdAt:e.created_at,updatedAt:e.updated_at}}}}};